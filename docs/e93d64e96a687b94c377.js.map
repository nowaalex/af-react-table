{"version":3,"sources":["webpack://af-virtual-scroll/./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://af-virtual-scroll/./src/components/List/Rows/index.js","webpack://af-virtual-scroll/./src/components/List/index.js","webpack://af-virtual-scroll/./src/examples/list/equalHeights/index.js"],"names":["_assertThisInitialized","self","ReferenceError","E","START_INDEX","END_INDEX","Rows","dataRef","renderRow","useSubscription","API","startIndex","endIndex","virtualTopOffset","result","i","push","ref","style","transform","memo","List","fixed","children","estimatedRowHeight","rowsQuantity","overscanRowsCount","props","useState","rowsContainerNode","rowsContainerRef","Store","useModel","FixedHeightsStore","VariableHeightsStore","Context","value","ScrollContainer","defaultProps","commonDefaultProps","wrapperStyle","minWidth","maxWidth"],"mappings":";4HAAe,SAASA,EAAuBC,GAC7C,QAAa,IAATA,EACF,MAAM,IAAIC,eAAe,6DAG3B,OAAOD,E,4OCDHE,EAAI,CAAEC,KAAaC,MAEnBC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAZ,OAA4BC,QAAiB,SAAAC,GAKtD,IAL6D,IAErDC,EAA2CD,EAA3CC,WAAYC,EAA+BF,EAA/BE,SAAUC,EAAqBH,EAArBG,iBACxBC,EAAS,GAENC,EAAIJ,EAAYI,EAAIH,EAAUG,IACnCD,EAAOE,KAAMR,EAAWO,IAG5B,OACI,gBAAKE,IAAKV,EAASW,MAAO,CAAEC,UAAW,cAAcN,EAAhB,OAArC,SACKC,MAGVX,IAEH,GAAeiB,UAAMd,GCRfe,EAAO,SAAC,GAQR,IAPFC,EAOE,EAPFA,MACAC,EAME,EANFA,SACAC,EAKE,EALFA,mBACAC,EAIE,EAJFA,aACAC,EAGE,EAHFA,kBACAnB,EAEE,EAFFA,QACGoB,GACD,oGAE8CC,gBAAxCC,EAFN,KAEyBC,EAFzB,KAIIC,GAAQC,OACVV,EAAQW,IAAoBC,IAC5B3B,EACAiB,EACAE,EACAD,EACAI,GAGJ,OACI,SAACM,EAAA,WAAD,CAAkBC,MAAOL,EAAzB,UACI,SAACM,EAAA,EAAD,iBAAqBV,EAArB,WACI,SAAC,EAAD,CAAMpB,QAASuB,EAAkBtB,UAAWe,UAoB5DF,EAAKiB,aAAeC,IAEpB,OAAenB,UAAMC,I,oECpDfmB,EAAe,CAAEC,SAAU,IAAKC,SAAU,KAQhD,UANmB,kBACf,SAAC,IAAD,CAAMpB,OAAK,EAACJ,MAAOsB,EAAcf,aAAc,IAA/C,SACK,SAAAV,GAAC,OAAI,kCAAkBA,IAARA","file":"e93d64e96a687b94c377.js","sourcesContent":["export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import { memo } from \"react\";\r\nimport { START_INDEX, END_INDEX } from \"constants/events\";\r\nimport useSubscription from \"hooks/useSubscription\";\r\n\r\nconst E = [ START_INDEX, END_INDEX ];\r\n\r\nconst Rows = ({ dataRef, renderRow }) => useSubscription( API => {\r\n\r\n    const { startIndex, endIndex, virtualTopOffset } = API;\r\n    const result = [];\r\n\r\n    for( let i = startIndex; i < endIndex; i++ ){\r\n        result.push( renderRow( i ) );\r\n    }\r\n\r\n    return (\r\n        <div ref={dataRef} style={{ transform: `translateY(${virtualTopOffset}px)` }}>\r\n            {result}\r\n        </div>\r\n    );\r\n}, E );\r\n\r\nexport default memo( Rows );","import { memo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Context from \"Context\";\r\nimport useModel from \"hooks/useModel\";\r\n\r\nimport VariableHeightsStore from \"models/VariableSizeList\";\r\nimport FixedHeightsStore from \"models/FixedSizeList\";\r\n\r\nimport ScrollContainer from \"../common/ScrollContainer\";\r\nimport commonDefaultProps from \"../common/defaultProps\";\r\n\r\nimport Rows from \"./Rows\";\r\n\r\nconst List = ({\r\n    fixed,\r\n    children,\r\n    estimatedRowHeight,\r\n    rowsQuantity,\r\n    overscanRowsCount,\r\n    dataRef,\r\n    ...props\r\n}) => {\r\n\r\n    const [ rowsContainerNode, rowsContainerRef ] = useState();\r\n\r\n    const Store = useModel(\r\n        fixed ? FixedHeightsStore : VariableHeightsStore,\r\n        dataRef,\r\n        estimatedRowHeight,\r\n        overscanRowsCount,\r\n        rowsQuantity,\r\n        rowsContainerNode\r\n    );\r\n\r\n    return (\r\n        <Context.Provider value={Store}>\r\n            <ScrollContainer {...props}>\r\n                <Rows dataRef={rowsContainerRef} renderRow={children} /> \r\n            </ScrollContainer>\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nList.propTypes = {\r\n    rowsQuantity: PropTypes.number.isRequired,\r\n    className: PropTypes.string,\r\n    fixed: PropTypes.bool,\r\n    overscanRowsCount: PropTypes.number,\r\n    estimatedRowHeight: PropTypes.number,\r\n\r\n    /**\r\n     * @param {number} rowIndex\r\n     * @returns {any} one row element child. Fragments are not supported.\r\n     */\r\n    children: PropTypes.func.isRequired\r\n}\r\n\r\nList.defaultProps = commonDefaultProps;\r\n\r\nexport default memo( List );","import { List } from \"af-virtual-scroll\";\n\n\n/*\n    Initial dimensions are not required, but flex-grow/min-width/smth. should be set,\n    because otherwise List may collapse to zero-width\n*/\n\nconst wrapperStyle = { minWidth: 200, maxWidth: 400 };\n\nconst SimpleList = () => (\n    <List fixed style={wrapperStyle} rowsQuantity={1000}>\n        {i => <div key={i}>row {i}</div>}\n    </List>\n);\n\nexport default SimpleList;"],"sourceRoot":""}