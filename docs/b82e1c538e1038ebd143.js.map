{"version":3,"sources":["webpack://af-virtual-scroll/./src/Context.js","webpack://af-virtual-scroll/./src/components/common/HeightProvider/style.module.scss?9ac1","webpack://af-virtual-scroll/./src/components/common/HeightProvider/index.js","webpack://af-virtual-scroll/./src/components/common/ScrollContainer/style.module.scss?e713","webpack://af-virtual-scroll/./src/components/common/ScrollContainer/index.js","webpack://af-virtual-scroll/./src/constants/events.js","webpack://af-virtual-scroll/./src/hooks/useApi/index.js","webpack://af-virtual-scroll/./src/hooks/useModel/index.js","webpack://af-virtual-scroll/./src/hooks/useForceUpdate/index.js","webpack://af-virtual-scroll/./src/hooks/useSubscription/index.js","webpack://af-virtual-scroll/./src/models/FixedSizeList/index.js","webpack://af-virtual-scroll/./src/models/PubSub/index.js","webpack://af-virtual-scroll/./src/utils/throttle/index.js","webpack://af-virtual-scroll/./src/models/ListBase/index.js","webpack://af-virtual-scroll/./src/models/VariableSizeList/index.js","webpack://af-virtual-scroll/./src/utils/cx/index.js","webpack://af-virtual-scroll/./src/utils/heightObserver/index.js"],"names":["createContext","E","WIDGET_SCROLL_HEIGHT","WIDGET_EXTRA_STICKY_HEIGHT","useSubscription","API","className","css","style","height","widgetScrollHeight","extraStickyHeight","children","props","ref","useRef","useApi","useEffect","el","current","setScrollContainerNode","observe","setWidgetHeight","unobserve","tabIndex","cx","onScroll","e","setScrollTop","target","scrollTop","START_INDEX","END_INDEX","ROWS_QUANTITY","EVENTS_ARRAY_LENGTH","useContext","Context","StoreConstructor","dataRef","estimatedRowHeight","overscanRowsCount","rowsQuantity","rowsContainerNode","rangeEndMoveHandler","finalDataRef","Store","startBatch","setParams","endBatch","destructor","increment","x","useReducer","callBack","events","prevRenderRef","forceUpdate","useForceUpdate","on","off","inBatch","queue","FixedSizeList","ListBase","setRowHeight","v","this","rowHeight","remeasure","constructor","super","measureRowsThrottled","getIndex","offset","Math","trunc","getOffset","index","measureRows","firstElementChild","offsetHeight","_E","Array","from","length","_Q","Set","_on","shouldPrepend","fn","prototype","unshift","push","evt","call","prependListener","splice","clear","indexOf","cb","add","emit","ms","ctx","timer","invoke","throttled","setTimeout","cancel","clearTimeout","PubSub","node","scrollContainerNode","updateVisibleRange","widgetHeight","updateEndIndex","updateExtraStickyHeight","delta","endIndex","min","startIndex","max","virtualTopOffset","updateWidgetScrollHeight","throttle","callRangeEndMoveHandler","scrollToRow","rowIndex","VariableSizeList","rowHeights","fTree","msb","grow","Error","clz32","curRowHeighsLength","oldRowHeights","Uint32Array","set","fill","j","i","tempIndex","bitMask","result","updateRowHeight","limitTreeLiftingIndex","diff","buff","lim","child","baseClass","extraClass","callBacks","Map","R","ResizeObserver","entries","entry","get","round","contentRect","delete"],"mappings":"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","file":"b82e1c538e1038ebd143.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport default createContext();","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"a2uMg3Zj4kpPT6J8EoqLx\"};","import useSubscription from \"hooks/useSubscription\";\nimport css from \"./style.module.scss\";\nimport { WIDGET_SCROLL_HEIGHT, WIDGET_EXTRA_STICKY_HEIGHT } from \"constants/events\";\n\nconst E = [ WIDGET_SCROLL_HEIGHT, WIDGET_EXTRA_STICKY_HEIGHT ];\n\nconst HeightProvider = () => useSubscription( API => (\n    <div\n        className={css.wrapper}\n        style={{ height: API.widgetScrollHeight + API.extraStickyHeight }}\n    />\n), E );\n\nexport default HeightProvider","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_3Jl24WrVf4wfsfDMBe4LVm\"};","import { useRef, useEffect } from \"react\";\r\nimport cx from \"utils/cx\";\r\nimport { observe, unobserve } from \"utils/heightObserver\";\r\nimport useApi from \"hooks/useApi\";\r\nimport HeightProvider from \"../HeightProvider\";\r\nimport css from \"./style.module.scss\";\r\n\r\nconst ScrollContainer = ({ className, children, ...props }) => {\r\n\r\n    const ref = useRef();\r\n    const API = useApi();\r\n\r\n    useEffect(() => {\r\n        const el = ref.current;\r\n\r\n        API.setScrollContainerNode( el );\r\n\r\n        observe( el, height => API.setWidgetHeight( height ) );\r\n\r\n        return () => unobserve( el );\r\n    }, []);\r\n    \r\n    /*\r\n        tabIndex=\"0\" is for proper keyboard nav\r\n        https://bugzilla.mozilla.org/show_bug.cgi?id=1346159\r\n    */\r\n    return (\r\n        <div\r\n            {...props}\r\n            tabIndex=\"0\"\r\n            className={cx(css.wrapper,className)}\r\n            ref={ref}\r\n            onScroll={e => API.setScrollTop( e.target.scrollTop )}\r\n        >\r\n            <HeightProvider />\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScrollContainer;","export const START_INDEX                    = 0;\nexport const END_INDEX                      = 1;\nexport const ROWS_QUANTITY                  = 2;\nexport const WIDGET_SCROLL_HEIGHT           = 3;\nexport const WIDGET_EXTRA_STICKY_HEIGHT     = 4;\n\nexport const EVENTS_ARRAY_LENGTH            = 5;","import { useContext } from \"react\";\nimport Context from \"../../Context\";\n\nconst useApi = () => useContext( Context );\n\nexport default useApi;","import { useRef, useEffect } from \"react\";\n\n/*\n    dataRef is to call Data methods from outside( Data.scrollTo(), etc. ).\n    As it is not dom-related, I decided to avoid forwardRef\n*/\nconst useStore = ( StoreConstructor, dataRef, estimatedRowHeight, overscanRowsCount, rowsQuantity, rowsContainerNode, rangeEndMoveHandler ) => {\n\n    const finalDataRef = useRef();\n\n    let Store = finalDataRef.current;\n\n    if( !( Store instanceof StoreConstructor ) ){\n        Store = finalDataRef.current = new StoreConstructor();\n    }\n\n    if( dataRef ){\n        dataRef.current = Store;\n    }\n\n    Store.startBatch().setParams( estimatedRowHeight, overscanRowsCount, rowsQuantity, rowsContainerNode, rangeEndMoveHandler );\n\n    useEffect(() => {\n        Store.endBatch();\n    });\n    \n    useEffect(() => () => Store.destructor(), [ Store ]);\n\n    return Store;\n};\n\nexport default useStore;","import { useReducer } from \"react\";\n\nconst increment = x => x + 1;\n\nconst useForceUpdate = () => useReducer( increment, 0 )[ 1 ];\n\nexport default useForceUpdate;","import { useRef, useEffect } from \"react\";\nimport useForceUpdate from \"../useForceUpdate\";\nimport useApi from \"../useApi\";\n\nconst useSubscription = ( callBack, events ) => {\n    \n    const prevRenderRef = useRef( null );\n    const API = useApi();\n    const forceUpdate = useForceUpdate();\n    \n    useEffect(() => {\n        API.on( forceUpdate, ...events );\n        return () => API.off( forceUpdate, ...events );\n    }, events );\n\n    if( API.inBatch ){\n        /*\n            Somebody tried to rerender, while we were in batch.\n            On batch finish component definitely must be rerendered.\n        */\n        API.queue( forceUpdate );\n    }\n    else{\n        prevRenderRef.current = callBack( API );\n    }\n    \n    return prevRenderRef.current;\n}\n\nexport default useSubscription;","import ListBase from \"../ListBase\";\n\nimport { ROWS_QUANTITY } from \"constants/events\";\n\nclass FixedSizeList extends ListBase {\n\n    rowHeight = 0;\n\n    setRowHeight( v ){\n        if( v !== this.rowHeight ){\n            this.rowHeight = v;\n            this.remeasure();\n        }\n    }\n\n    constructor(){\n        super();\n\n        this.on( this.measureRowsThrottled, ROWS_QUANTITY );\n    }\n\n\n    getIndex( offset ){\n        /* rounding via bitwise hacks like |0 may not work here, because number may be > max(int32) */\n        return this.rowHeight && Math.trunc( offset / this.rowHeight );\n    }\n\n    getOffset( index ){\n        return index * this.rowHeight;\n    }\n\n    measureRows(){\n        if( this.rowsContainerNode && this.rowsQuantity ){\n            this.setRowHeight( this.rowsContainerNode.firstElementChild?.offsetHeight || 0 );\n        }\n    }    \n}\n\nexport default FixedSizeList;","import { EVENTS_ARRAY_LENGTH } from \"constants/events\";\n\nclass PubSub {\n\n    /* All callbacks are known in advance, so we can allocate in construcror */\n    _E = Array.from({ length: EVENTS_ARRAY_LENGTH }, () => []);\n\n    /* query of callbacks, that should run after batch end */\n    _Q = new Set();\n\n    /* depth of batch */\n    inBatch = 0;\n\n    _on( callBack, events, shouldPrepend ){\n        const fn = shouldPrepend ? Array.prototype.unshift : Array.prototype.push;\n        for( let evt of events ){\n            fn.call( this._E[ evt ], callBack );\n        }\n        return this;\n    }\n\n    on( callBack, ...events ){\n        return this._on( callBack, events, false );\n    }\n\n    prependListener( callBack, ...events ){\n        return this._on( callBack, events, true );\n    }\n\n    destructor(){\n        for( let events of this._E ){\n            events.splice( 0 );\n        }\n        this._Q.clear();\n    }\n\n    off( callBack, ...events ){\n        for( let evt of events ){\n            this._E[ evt ].splice( this._E[ evt ].indexOf( callBack ) >>> 0, 1 );\n        }\n        return this;\n    }\n\n    queue( cb ){\n        if( process.env.NODE_ENV !== \"production\" ){\n            if( !this.inBatch ){\n                console.error( \"trying to add event to batch queue, while inBatch is 0\" );\n            }\n        }\n        this._Q.add( cb );\n    }\n\n    emit( evt ){\n        if( this.inBatch ){\n            for( let cb of this._E[ evt ] ){\n                this._Q.add( cb );\n            }\n        }\n        else{\n            for( let cb of this._E[ evt ] ){\n                cb.call( this );\n            }\n        }\n        return this;\n    }\n\n    /* inspired by mobx */\n\n    startBatch(){\n        this.inBatch++;\n        return this;\n    }\n\n    endBatch(){\n        if( !--this.inBatch ){\n            for( let cb of this._Q ){\n                cb.call( this );\n            }\n            this._Q.clear();\n        }\n        return this;\n    }\n}\n\nexport default PubSub;","const throttle = ( fn, ms, ctx ) => {\n    let timer = 0;\n\n    const cancel = () => {\n        clearTimeout( timer );\n        timer = 0;\n    }\n\n    const invoke = () => {\n        timer = 0;\n        fn.call( ctx );\n    }\n\n    const throttled = () => {\n        if( timer === 0 ){\n            timer = setTimeout( invoke, ms );\n        }\n    }\n\n    throttled.cancel = cancel;\n\n    return throttled;\n}\n\nexport default throttle;","import PubSub from \"../PubSub\";\nimport throttle from \"utils/throttle\";\n\nimport {\n    START_INDEX,\n    END_INDEX,\n    ROWS_QUANTITY,\n    WIDGET_SCROLL_HEIGHT,\n    WIDGET_EXTRA_STICKY_HEIGHT\n} from \"constants/events\";\n\nclass ListBase extends PubSub {\n\n    /* Provided from renderer */\n    scrollTop = 0;\n\n    rowsQuantity = 0;\n\n    /* must be >= 1 */\n    overscanRowsCount = 2;\n\n    widgetHeight = 0;\n\n    /* sticky elements ( for example table header/footer ) must influence ONLY on widgetScrollHeight */\n    extraStickyHeight = 0;\n\n    estimatedRowHeight = 0;\n\n    rowsContainerNode = null;\n    scrollContainerNode = null;\n    rangeEndMoveHandler = null;\n\n    setScrollContainerNode( node ){\n        this.scrollContainerNode = node;\n    }\n\n    setScrollTop( v ){\n        if( v !== this.scrollTop ){\n            this.scrollTop = v;\n            this.updateVisibleRange();\n        }\n    }\n\n    setWidgetHeight( height ){\n        if( height !== this.widgetHeight ){\n            this.widgetHeight = height;\n            this.updateEndIndex();\n        }\n\n        this.measureRowsThrottled();\n    }\n\n    updateExtraStickyHeight( delta ){\n        if( delta ){\n            this.extraStickyHeight += delta;\n            this.emit( WIDGET_EXTRA_STICKY_HEIGHT );\n        }\n    }\n\n    updateEndIndex(){\n\n        const endIndex = Math.min( this.getIndex( this.scrollTop + this.widgetHeight ) + this.overscanRowsCount, this.rowsQuantity );\n\n        if( endIndex !== this.endIndex ){\n            this.endIndex = endIndex;\n            this.emit( END_INDEX );\n        }\n\n        return this;\n    }\n\n    updateVisibleRange(){\n\n        const startIndex = Math.max( 0, this.getIndex( this.scrollTop ) - this.overscanRowsCount );\n\n        if( startIndex !== this.startIndex ){\n            this.startIndex = startIndex;\n            this.virtualTopOffset = this.getOffset( startIndex );\n            this.emit( START_INDEX );\n        }\n\n        return this.updateEndIndex();\n    }\n\n\n    /* must be called when row height/heights change */\n    remeasure(){\n        return this\n            .updateWidgetScrollHeight()\n            .updateVisibleRange();\n    }\n\n    constructor(){\n        super()\n\n        this\n            .on( this.updateWidgetScrollHeight, ROWS_QUANTITY )\n            .on( this.updateEndIndex, ROWS_QUANTITY )\n            .on( this.callRangeEndMoveHandler, ROWS_QUANTITY, END_INDEX );\n    }\n\n    destructor(){\n        this.measureRowsThrottled.cancel();\n        super.destructor();\n    }\n\n    scrollToRow( rowIndex ){\n        if( this.scrollContainerNode ){\n            this.scrollContainerNode.scrollTop = this.getOffset( rowIndex );\n        }\n        else if( process.env.NODE_ENV !== \"production\" ){\n            console.error( \"scrollContainerNode is not set\" );\n        }\n    }\n\n    updateWidgetScrollHeight(){\n        const v = this.getOffset( this.rowsQuantity );\n        if( v !== this.widgetScrollHeight ){\n            this.widgetScrollHeight = v;\n            this.emit( WIDGET_SCROLL_HEIGHT );\n        }\n        return this;\n    }\n\n    callRangeEndMoveHandler(){\n        if( this.rangeEndMoveHandler ){\n            this.rangeEndMoveHandler( this );\n        }\n    }\n\n    setParams( estimatedRowHeight, overscanRowsCount, rowsQuantity, rowsContainerNode, rangeEndMoveHandler ){\n\n        this.estimatedRowHeight = estimatedRowHeight;\n        this.rowsContainerNode = rowsContainerNode;\n\n        this.startBatch();\n\n        if( overscanRowsCount !== this.overscanRowsCount ){\n            this.overscanRowsCount = overscanRowsCount;\n            this.queue( this.updateVisibleRange );\n        }\n\n        if( rowsQuantity !== this.rowsQuantity ){\n            this.rowsQuantity = rowsQuantity;\n            this.emit( ROWS_QUANTITY );\n        }\n\n        if( !this.rangeEndMoveHandler ){\n            this.queue( this.callRangeEndMoveHandler );\n        }\n        this.rangeEndMoveHandler = rangeEndMoveHandler || null;\n\n        this.endBatch();\n    }\n\n    measureRowsThrottled = throttle( this.measureRows, 200, this );\n\n    /* Calculated inside model */\n    startIndex = 0;\n    endIndex = 0;\n    virtualTopOffset = 0;\n    widgetScrollHeight = 0;\n}\n\nexport default ListBase;","import ListBase from \"../ListBase\";\n\nimport {\n    ROWS_QUANTITY,\n    START_INDEX,\n    END_INDEX,\n} from \"constants/events\";\n\nclass VariableSizeList extends ListBase {\n    \n    rowHeights = [];\n    fTree = [];\n\n    /*\n        most significant bit of this.rowsQuantity;\n        caching it to avoid Math.clz32 calculations on every getIndex call\n    */\n    msb = 0;\n    \n    constructor(){\n        super();\n\n        this\n            /* must be done before events, attached in ListBase */\n            .prependListener( this.grow, ROWS_QUANTITY )\n            .on( this.measureRowsThrottled, START_INDEX, END_INDEX );            \n    }\n\n    grow(){\n        const { rowsQuantity } = this;\n\n        if( rowsQuantity < 0 || rowsQuantity > 0x7fffffff ){\n            throw new Error( `Wrong rowsQuantity: ${rowsQuantity}. Must be 0...2_147_483_647.` )\n        }\n\n        this.msb = rowsQuantity && 1 << 31 - Math.clz32( rowsQuantity );\n\n        const curRowHeighsLength = this.rowHeights.length;\n\n        if( rowsQuantity > curRowHeighsLength ){\n\n            const oldRowHeights = this.rowHeights;\n            \n            this.rowHeights = new Uint32Array( rowsQuantity );\n            this.fTree = new Uint32Array( rowsQuantity + 1 );\n\n            this.rowHeights.set( oldRowHeights );\n            this.rowHeights.fill( this.estimatedRowHeight, curRowHeighsLength );\n\n\n            /* \n                Creating fenwick tree from an array in linear time;\n                It is much more efficient, than calling updateRowHeight N times.\n            */\n\n            this.fTree.set( this.rowHeights, 1 );\n\n            for( let i = 1, j; i <= rowsQuantity; i++ ){\n                j = i + ( i & -i );\n                if( j <= rowsQuantity ){\n                    this.fTree[ j ] += this.fTree[ i ];\n                }\n            }\n\n            this.remeasure();\n        }        \n    }\n\n    getIndex( offset ){\n        let index = 0;\n        \n        for( let bitMask = this.msb, tempIndex; bitMask !== 0; bitMask >>= 1 ){\n            tempIndex = index + bitMask;\n            if( tempIndex > this.rowsQuantity ){\n                continue;\n            }\n            if( offset === this.fTree[ tempIndex ] ){\n                return tempIndex;\n            }\n            if( offset > this.fTree[ tempIndex ] ) {\n                offset -= this.fTree[ tempIndex ];\n                index = tempIndex;\n            }\n        }\n\n        return index;\n    }\n\n    getOffset( index ){\n        if( process.env.NODE_ENV !== \"production\" ){\n            if( index > this.rowsQuantity ){\n                throw new Error( \"index must not be > rowsQuantity\" );\n            }\n        }\n\n        let result = 0;\n\n        for ( ; index > 0; index -= index & -index ){\n            result += this.fTree[ index ];\n        }\n\n        return result;\n    }\n\n    /* i starts from 1 here; */\n    updateRowHeight( i, delta, limitTreeLiftingIndex ){\n        for ( ; i < limitTreeLiftingIndex; i += i & -i ){\n            this.fTree[ i ] += delta;\n        }\n    }\n\n    measureRows(){\n        const node = this.rowsContainerNode;\n\n        if( node ){\n\n            let index = this.startIndex,\n                diff,\n                buff = 0;\n            \n            /* We can batch-update fenwick tree, if we know, that all indexes are updated in +1 - order. */\n            const lim = Math.min( this.fTree.length, 1 << 32 - Math.clz32( this.endIndex - 1 ) );\n\n            for( let child of node.children ){\n     \n                diff = child.offsetHeight - this.rowHeights[ index ];\n\n                if( diff ){\n                    this.rowHeights[ index ] += diff;\n                    buff += diff;\n                    this.updateRowHeight( index + 1, diff, lim );                  \n                }\n                \n                index++;\n            }\n\n            if( buff ){\n                this.updateRowHeight( lim, buff, this.fTree.length );\n                this.remeasure();\n            }\n        }\n    }\n}\n\nexport default VariableSizeList;","const cx = ( baseClass, extraClass ) => extraClass ? `${baseClass} ${extraClass}` : baseClass;\r\n\r\nexport default cx;","const callBacks = new Map();\n\nconst R = new ResizeObserver( entries => {\n    for( let entry of entries ){\n        const cb = callBacks.get( entry.target );\n        if( cb ){\n            cb( Math.round( entry.contentRect.height ) )\n        }\n    }\n});\n\nexport const observe = ( el, callBack ) => {\n    callBacks.set( el, callBack );\n    R.observe( el );\n}\n\nexport const unobserve = el => callBacks.delete( el ) && R.unobserve( el );"],"sourceRoot":""}