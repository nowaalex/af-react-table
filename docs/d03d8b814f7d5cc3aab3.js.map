{"version":3,"sources":["webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/multiGroupBy/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/getSorter/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/sortGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/flattenGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/index.js","webpack://af-virtual-scroll/./src/components/ComplexTable/style.module.scss?b8c6","webpack://af-virtual-scroll/./src/components/ComplexTable/index.js","webpack://af-virtual-scroll/./src/examples/complexTable(unstable)/basic/index.js"],"names":["indexesArray","groupDataKeysList","getRowData","priorityGroupValuesArray","lastGroupIndex","length","lastGroupDataKey","groupsMap","Map","rowIndex","row","innerObject","tmpInnerObject","cellValue","i","get","priorityValue","has","set","push","sortDataKey","sortDirection","a","b","row1","row2","v1","v2","sortGroups","depth","currentDepth","groupValues","values","group","sortCallback","getSorter","sort","flattenGroups","collapsedGroups","prefix","rowIndexes","idx","groupValue","subGroup","concatenated","concat","Array","isArray","apply","rowsQuantity","columns","compact","filtersMap","groupKeys","Set","makeAutoObservable","this","visibleColumns","computed","equals","comparer","setFiltering","dataKey","value","toLowerCase","delete","toggleCompact","setSorting","setGrouping","dataKeysArray","addGrouping","includes","clear","toggleCollapsedGroup","add","removeGrouping","indexOf","splice","filter","col","map","find","c","priorityGroupValues","from","v","multiGroupBy","filteredIndexes","grouped","groupedSorted","orderedIndexes","size","flattenedGroups","hasGrouping","groupsSortedIndexes","noGroupsSortedIndexes","merge","propertiesObj","Object","assign","HeaderLabel","observer","m","label","useDrag","item","type","dragRef","ref","className","css","onClick","aria-sort","undefined","data-collapsed","HeaderInput","onChange","e","target","getCount","total","nested","getSum","SummaryCell","column","totals","sum","fn","formatTotal","format","GroupLabelDefault","groupKey","onRemove","onDoubleClick","GroupsPanel","GroupLabel","useDrop","accept","drop","dropRef","GroupCell","isCollapsed","groupPath","getGroupLabel","Fragment","style","marginLeft","path","reduce","res","key","ComplexTable","props","useState","RowsAggregator","finalIndexes","useEffect","initialGroupingKeys","slice","initialGrouingIndex","initialGroupingIndex","cx","Table","renderRow","RowProps","realRowIndex","index","colSpan","Row","renderHeaderCells","minWidth","renderTfootContent","normalizedVisibleColumns","some","rows","fixedRange","firstName","faker","lastName","country","estimatedRowHeight","render","cellData","color","textAlign","lineHeight","background"],"mappings":"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","file":"d03d8b814f7d5cc3aab3.js","sourcesContent":["const multiGroupBy = ( indexesArray, groupDataKeysList, getRowData, priorityGroupValuesArray ) => {\n\n    const lastGroupIndex = groupDataKeysList.length - 1;\n\n    if( process.env.NODE_ENV !== \"production\" ){\n        if( lastGroupIndex < 0 ){\n            throw new Error( \"lastGroupIndex < 0\" );\n        }\n    }\n\n    const lastGroupDataKey = groupDataKeysList[ lastGroupIndex ];\n    const groupsMap = new Map();\n   \n\n    for( let rowIndex of indexesArray ){\n        /*\n            It is better to start from indexes iteration, not from groups, to minimize getRowData calls\n        */\n        const row = getRowData( rowIndex );\n\n        if( !row ){\n            continue;\n        }\n\n        let innerObject = groupsMap,\n            tmpInnerObject,\n            cellValue;\n\n        /*\n            We could put everything in one loop, but last iteration is different.\n        */\n        for( let i = 0; i < lastGroupIndex; i++ ){\n            cellValue = row[ groupDataKeysList[ i ] ];\n            tmpInnerObject = innerObject.get( cellValue );\n            if( !tmpInnerObject ){\n                tmpInnerObject = new Map();\n                for( let priorityValue of priorityGroupValuesArray[ i ] ){\n                    if( !innerObject.has( priorityValue ) ){\n                        innerObject.set( priorityValue, null );\n                    }\n                }\n                innerObject.set( cellValue, tmpInnerObject );\n            }\n            innerObject = tmpInnerObject;\n        }\n\n        cellValue = row[ lastGroupDataKey ];\n        tmpInnerObject = innerObject.get( cellValue );\n\n        if( tmpInnerObject ){\n            tmpInnerObject.push( rowIndex );\n        }\n        else {\n            for( let priorityValue of priorityGroupValuesArray[ lastGroupIndex ] ){\n                if( !innerObject.has( priorityValue  ) ){\n                    innerObject.set( priorityValue, null );\n                }\n            }\n            innerObject.set( cellValue, [ rowIndex ]);\n        }\n    }\n\n    return groupsMap;\n}\n\nexport default multiGroupBy;","const getSorter = ( getRowData, sortDataKey, sortDirection ) => ( a, b ) => {\n    const row1 = getRowData( a );\n    const row2 = getRowData( b );\n\n    if( row1 && row2 ){\n        const v1 = row1[ sortDataKey ];\n        const v2 = row2[ sortDataKey ];\n        return v1 > v2 ? sortDirection : v1 < v2 ? -sortDirection : 0;\n    }\n\n    return row1 ? sortDirection : row2 ? -sortDirection : 0;\n}\n\nexport default getSorter;","import getSorter from \"../getSorter\";\n\nconst sortGroups = ( groupsMap, getRowData, sortDataKey, sortDirection, depth, currentDepth = 0 ) => {\n\n    const groupValues = groupsMap.values();\n\n    if( currentDepth < depth - 1 ){\n        for( let group of groupValues ){\n            if( group ){\n                sortGroups( group, getRowData, sortDataKey, sortDirection, depth, currentDepth + 1 );\n            }\n        }\n    }\n    else{\n        const sortCallback = getSorter( getRowData, sortDataKey, sortDirection );\n\n        for( let group of groupValues ){\n            if( group ){\n                group.sort( sortCallback );\n            }\n        }\n    }\n}\n\nexport default sortGroups;","const flattenGroups = ( groupsMap, collapsedGroups, prefix = [], groupValues = [], rowIndexes = [] ) => {\n    let idx;\n    for( let [ groupValue, subGroup ] of groupsMap ){\n        if( subGroup ){\n            const concatenated = prefix.concat( groupValue );\n            idx = -groupValues.push( concatenated );\n            rowIndexes.push( idx );\n            if( !collapsedGroups.has( idx ) ){\n                if( Array.isArray( subGroup ) ){\n                    rowIndexes.push.apply( rowIndexes, subGroup );\n                }\n                else{\n                    flattenGroups( subGroup, collapsedGroups, concatenated, groupValues, rowIndexes );\n                }\n            }\n        }\n    }\n\n    return { groupValues, rowIndexes };\n}\n\nexport default flattenGroups;","import { makeAutoObservable, comparer, computed } from \"mobx\"; \nimport multiGroupBy from \"./utils/multiGroupBy\";\nimport sortGroups from \"./utils/sortGroups\";\nimport flattenGroups from \"./utils/flattenGroups\";\nimport getSorter from \"./utils/getSorter\";\n\nclass RowsAggregator {\n\n    /* Provided from renderer */\n    rowsQuantity = 0;\n    getRowData = null;\n    columns = [];\n    compact = true;\n\n    /* Calculated inside model */\n    filtersMap = new Map();\n    groupKeys = [];\n    sortDataKey = \"\";\n    sortDirection = -1;\n\n    collapsedGroups = new Set();\n\n    get visibleColumns(){\n        return this.columns.filter( col => !this.groupKeys.includes( col.dataKey ) );\n    }\n\n    get priorityGroupValuesArray(){\n        return this.groupKeys.map( dataKey => this.columns.find( c => c.dataKey === dataKey ).priorityGroupValues || [] );\n    }\n\n    setFiltering( dataKey, value ){\n        if( value ){\n            this.filtersMap.set( dataKey, value.toLowerCase() );\n        }\n        else{\n            this.filtersMap.delete( dataKey );\n        }\n    }\n\n    toggleCompact(){\n        this.compact = !this.compact;\n    }\n\n    setSorting( dataKey ){\n        if( this.sortDataKey === dataKey ){\n            this.sortDirection *= -1;\n        }\n        this.sortDataKey = dataKey;\n    }\n\n    setGrouping( dataKeysArray ){\n        this.groupKeys = dataKeysArray;\n    }\n\n    addGrouping( dataKey ){\n        if( !this.groupKeys.includes( dataKey ) ){\n            this.groupKeys.push( dataKey );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    toggleCollapsedGroup( idx ){\n        if( this.collapsedGroups.has( idx ) ){\n            this.collapsedGroups.delete( idx );\n        }\n        else{\n            this.collapsedGroups.add( idx );\n        }\n    }\n\n    removeGrouping( dataKey ){\n        const idx = this.groupKeys.indexOf( dataKey );\n        if( idx !== -1 ){\n            this.groupKeys.splice( idx, 1 );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    get orderedIndexes(){\n        return Array.from({ length: this.rowsQuantity }, ( v, i ) => i );\n    }\n\n    get grouped(){\n        return multiGroupBy( this.filteredIndexes, this.groupKeys, this.getRowData, this.priorityGroupValuesArray );\n    }\n\n    get groupedSorted(){\n        if( this.sortDataKey ){\n            sortGroups( this.grouped, this.getRowData, this.sortDataKey, this.sortDirection, this.groupKeys.length );\n        }\n        return this.grouped;\n    }\n\n    get flattenedGroups(){\n        return flattenGroups( this.groupedSorted, this.collapsedGroups );\n    }\n\n    get filteredIndexes(){\n        const { filtersMap, orderedIndexes } = this;\n        if( this.filtersMap.size ){\n            const filteredIndexesArray = orderedIndexes.filter( idx => {\n                const row = this.getRowData( idx );\n                if( !row ){\n                    return false;\n                }\n                for( let [ dataKey, value ] of filtersMap ){\n                    if( !( \"\" + row[ dataKey ] ).toLowerCase().includes( value ) ){\n                        return false;\n                    }\n                }\n                return true;\n            });\n\n            return filteredIndexesArray;\n        }\n        return orderedIndexes;\n    }\n\n    \n    get noGroupsSortedIndexes(){\n        return this.sortDataKey ? this.filteredIndexes.sort( getSorter( this.getRowData, this.sortDataKey, this.sortDirection ) ) : this.filteredIndexes;\n    }\n\n    get groupsSortedIndexes(){\n        return this.flattenedGroups.rowIndexes;\n    }\n\n    get hasGrouping(){\n        return !!this.groupKeys.length;\n    }\n\n    get finalIndexes(){\n        return this.hasGrouping ? this.groupsSortedIndexes : this.noGroupsSortedIndexes;\n    }\n\n    constructor(){\n        makeAutoObservable( this, {\n            visibleColumns: computed({ equals: comparer.structural }),\n            priorityGroupValuesArray: computed({ equals: comparer.structural })\n        });\n    }\n\n    merge( propertiesObj ){\n        Object.assign( this, propertiesObj );\n    }\n}\n\nexport default RowsAggregator;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_2B3KY_2EhDdLzl3od9PxI3\",\"noUserSelect\":\"_2S2SLB_JTzTB3lBY1T4ZW1\",\"sortableHeader\":\"_3xhCMieeqyydLLrsB_Rjwr _2S2SLB_JTzTB3lBY1T4ZW1\",\"input\":\"_7PdTV3zpJzO5l3JPCJbaz\",\"groupsPanel\":\"_24CQvBWd2KIxalcwIBcG6S\",\"groupLabel\":\"_1Pfh0g4BE_cuNHu46ByRkY _2S2SLB_JTzTB3lBY1T4ZW1\",\"compactToggler\":\"_3KQQrpclW23r77-lYRKeHq _2S2SLB_JTzTB3lBY1T4ZW1\",\"groupToggler\":\"_2t1GlnfqduCsfI_X7Q0BSx _2S2SLB_JTzTB3lBY1T4ZW1\",\"columnSummaries\":\"QsUrLMXUKybinaPXO0z0B\"};","import { Fragment, useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport RowsAggregator from \"models/RowsAggregator\";\nimport Table from \"../Table\";\nimport cx from \"utils/cx\";\nimport css from \"./style.module.scss\";\nimport { useDrag, useDrop } from \"react-dnd\";\n\nconst HEADER_DND_TYPE = \"h\";\n\nconst HeaderLabel = /*#__PURE__*/ observer(({ m, dataKey, label, i }) => {\n\n    const [ collectedProps, dragRef ] = useDrag({ item: {\n        type: HEADER_DND_TYPE,\n        dataKey\n    }});\n\n    return (\n        <div\n            ref={dragRef}\n            className={css.sortableHeader}\n            onClick={() => m.setSorting( dataKey )}\n            aria-sort={m.sortDataKey === dataKey?(m.sortDirection===1?\"ascending\":\"descending\"):undefined}\n        >\n            {i === 0 ? <span data-collapsed={m.compact?\"\":undefined} onClick={() => m.toggleCompact()} className={css.compactToggler} /> : null}\n            {label}\n        </div>\n    );\n});\n\nconst HeaderInput = /*#__PURE__*/ observer(({ m, dataKey }) => m.compact ? null : (\n    <input\n        className={css.input}\n        value={m.filtersMap.get( dataKey )||\"\"}\n        onChange={e => m.setFiltering( dataKey, e.target.value )}\n    />\n));\n\nconst getCount = rowIndexes => {\n\n    let total = 0;\n\n    if( Array.isArray( rowIndexes ) ){\n        total += rowIndexes.length;\n    }\n    else {\n        for( let nested of rowIndexes.values() ){\n            if( nested ){\n                total += getCount( nested );\n            }\n        }\n    }\n\n    return total;\n}\n\nconst getSum = ( rowIndexes, dataKey, getRowData ) => {\n\n    let total = 0;\n\n    if( Array.isArray( rowIndexes ) ){\n        let row;\n        for( let j of rowIndexes ){\n            row = getRowData( j );\n            if( row ){\n                total += row[ dataKey ];\n            }\n        }\n    }\n    else {\n        for( let nested of rowIndexes.values() ){\n            if( nested ){\n                total += getSum( nested, dataKey, getRowData );\n            }\n        }\n    }\n\n    return total;\n}\n\nconst SummaryCell = /*#__PURE__*/ observer(({ m, column, rowIndexes }) => {\n\n    if( column.totals === \"count\" ){\n        return getCount( rowIndexes );\n    }\n\n    if( column.totals === \"sum\" ){\n        const sum = getSum( rowIndexes, column.dataKey, m.getRowData );\n        const fn = column.formatTotal || column.format;\n        return fn ? fn( sum ) : sum;\n    }\n\n    return null;\n});\n\nconst GroupLabelDefault = ({ groupKey, columns, onRemove }) => (\n    <div className={css.groupLabel} onDoubleClick={onRemove}>\n        {columns.find( col => col.dataKey === groupKey ).label}\n    </div>\n);\n\nconst GroupsPanel = /*#__PURE__*/ observer(({ m, GroupLabel }) => {\n\n    const [ collectedProps, dropRef ] = useDrop({\n        accept: HEADER_DND_TYPE,\n        drop( item ){\n            m.addGrouping( item.dataKey );\n        }\n    });\n\n    return m.compact ? null : (\n        <div className={css.groupsPanel} ref={dropRef}>\n            {m.groupKeys.length ? m.groupKeys.map( groupKey => (\n                <GroupLabel\n                    key={groupKey}\n                    groupKey={groupKey}\n                    columns={m.columns}\n                    onRemove={() => m.removeGrouping( groupKey )}\n                />\n            )) : \"Drag column headers here to group by column\" }\n        </div>\n    );\n});\n\nconst getInMap = ( map, path ) => path.reduce(( res, key ) => res.get( key ), map );\n\nconst GroupCell = /*#__PURE__*/ observer(({ m, columns, idx }) => {\n\n    const isCollapsed = m.collapsedGroups.has( idx );\n\n    if( m.hasGrouping ){\n\n        const groupPath = m.flattenedGroups.groupValues[~idx];\n\n        if( groupPath ){\n\n            const lastGroupIndex = groupPath.length - 1;\n            const groupKey = m.groupKeys[lastGroupIndex];\n            /* hidden columns also must be included */\n            const { getGroupLabel, label, format } = m.columns.find( c => c.dataKey === groupKey );\n            const groupValue = groupPath[lastGroupIndex];\n\n            return (\n                <Fragment>\n                    <span\n                        className={css.groupToggler}\n                        onClick={() => m.toggleCollapsedGroup( idx )}\n                        data-collapsed={isCollapsed?\"\":undefined}\n                        style={{\n                            marginLeft: `${(lastGroupIndex)*2}em`\n                        }}\n                    />\n                    &nbsp;\n                    {getGroupLabel?getGroupLabel(groupValue):(\n                        <Fragment>\n                            {label}:&nbsp;{format?format(groupValue):\"\"+groupValue}\n                        </Fragment>\n                    )}\n                    {columns.length ? (\n                        <span className={css.columnSummaries}>\n                            {columns.map( col => col.totals ? (\n                                <span key={col.dataKey}>\n                                    {col.label}:\n                                    &nbsp;\n                                    <SummaryCell\n                                        m={m}\n                                        column={col}\n                                        rowIndexes={getInMap(m.grouped,groupPath)}\n                                    />\n                                </span>\n                            ) : null)}\n                        </span>\n                    ) : null}\n                </Fragment>\n            );\n        }\n        \n    }\n\n    return null;\n});\n\nconst ComplexTable = ({ rowsQuantity, getRowData, className, columns, GroupLabel = GroupLabelDefault, ...props }) => {\n\n    const [ m ] = useState(() => new RowsAggregator());\n\n    /* hack to change renderRow by link */\n    const { finalIndexes } = m;\n\n    const renderRow = RowProps => {\n\n        const realRowIndex = finalIndexes[ RowProps.index ];\n\n        return realRowIndex < 0 ? (\n            <tr key={RowProps.index}>\n                <td colSpan={RowProps.columns.length}>\n                    <GroupCell m={m} idx={realRowIndex} columns={RowProps.columns} />\n                </td>\n            </tr>\n        ) : (\n            <RowProps.Row\n                {...RowProps}\n                key={RowProps.index}\n                index={realRowIndex}\n            />\n        );\n    }\n\n    const renderHeaderCells = columns => columns.map(({ dataKey, label, minWidth }, i ) => (\n        <th key={dataKey} style={{ minWidth }}>\n            <HeaderLabel m={m} dataKey={dataKey} label={label} i={i} />\n            <HeaderInput m={m} dataKey={dataKey} />\n        </th>\n    ));\n\n    useEffect(() => m.merge({ rowsQuantity, getRowData, columns }), [ rowsQuantity, getRowData, columns ]);\n\n    useEffect(() => {\n        const initialGroupingKeys = m.visibleColumns\n            .slice()\n            .sort(( a, b ) => ( a.initialGrouingIndex || 0 ) - ( b.initialGrouingIndex || 0 ) )\n            .filter( col => col.initialGroupingIndex )\n            .map( col => col.dataKey );\n\n        m.setGrouping( initialGroupingKeys );\n    }, []);\n\n    const renderTfootContent = normalizedVisibleColumns => normalizedVisibleColumns.some( col => !!col.totals ) ? (\n        <tr>\n            {normalizedVisibleColumns.map( col => (\n                <td key={col.dataKey}>\n                    <SummaryCell m={m} column={col} rowIndexes={m.filteredIndexes} />\n                </td>\n            ))}\n        </tr>\n    ) : null;\n\n    /*\n                Normally must be wrapped with DndProvider, but nested providers throw error.\n                Waiting for react-dnd release, which would fix this\n    */\n    return (\n        <div className={cx(css.wrapper,className)}>\n            <GroupsPanel m={m} GroupLabel={GroupLabel} />\n            <Table\n                columns={m.visibleColumns}\n                rowsQuantity={finalIndexes.length}\n                getRowData={getRowData}\n                renderRow={renderRow}\n                renderHeaderCells={renderHeaderCells}\n                renderTfootContent={renderTfootContent}\n                {...props}\n            />\n        </div>\n    );\n}\n\nexport default /*#__PURE__*/ observer( ComplexTable );","import { ComplexTable as Table } from  \"af-virtual-scroll\";\nimport faker from \"faker\";\n\nconst rows = Array.from({ length: 10000 }, (v, i) => ({\n    i,\n    fixedRange: i % 9,\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    country: faker.address.country()\n}));\n\n/* Math.random is not the best option, because same rowIndex should produce same height */\nconst getPureRandomLineHeight = rowIndex => 20 + ( rowIndex % 53 ) + ( rowIndex % 87 );\n\nconst ComplexTable = () => (\n    <Table\n        rowsQuantity={rows.length}\n        getRowData={i => rows[ i ]}\n        estimatedRowHeight={30}\n        columns={[\n            {\n                dataKey: \"i\",\n                label: \"i\",\n                totals: \"sum\",\n                render: cellData => (\n                    <div style={{\n                        color: \"#000\",\n                        textAlign: \"center\",\n                        lineHeight: `${getPureRandomLineHeight(cellData)}px`,\n                        background: `hsl(${cellData*11%360},60%,60%)`\n                    }}>\n                        {cellData}\n                    </div>\n                )\n            },\n            {\n                dataKey: \"fixedRange\",\n                format: v => `fr ${v}`,\n                label: \"FR\",\n                initialGroupingIndex: 1,\n                priorityGroupValues: [ 4, 7, 71, 5 ]\n            },\n            {\n                dataKey: \"firstName\",\n                label: \"first name\",\n                initialGroupingIndex: 2,\n                priorityGroupValues: [ \"Dennis\" ],\n                totals: \"count\"\n            },\n            { dataKey: \"lastName\", label: \"last name\" },\n            { dataKey: \"country\", label: \"country\" }\n        ]}\n    />\n);\n\nexport default ComplexTable;"],"sourceRoot":""}