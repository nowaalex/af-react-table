{"version":3,"sources":["webpack://af-virtual-scroll/./src/utils/startCase/index.js","webpack://af-virtual-scroll/./src/components/Table/Scroller/style.module.scss?b61c","webpack://af-virtual-scroll/./src/components/Table/Scroller/index.js","webpack://af-virtual-scroll/./src/components/Table/Rows/index.js","webpack://af-virtual-scroll/./src/components/Table/Colgroup/index.js","webpack://af-virtual-scroll/./src/components/Table/style.module.scss?eda3","webpack://af-virtual-scroll/./src/components/Table/index.js","webpack://af-virtual-scroll/./src/components/Table/renderers.js","webpack://af-virtual-scroll/./src/utils/normalizeTableColumn/index.js"],"names":["str","replace","x","toUpperCase","E","START_INDEX","useSubscription","API","className","css","aria-hidden","style","height","virtualTopOffset","END_INDEX","Rows","columns","renderRow","Row","getRowData","getRowProps","renderCell","Cell","startIndex","endIndex","result","i","push","index","memo","Colgroup","map","dataKey","background","border","width","Table","fixed","estimatedRowHeight","renderHeaderCells","renderFooter","rowsQuantity","overscanRowsCount","headless","dataRef","props","rowsContainerNode","rowsContainerRef","useState","Store","useModel","FixedHeightsStore","VariableHeightsStore","finalColumns","useMemo","column","col","normalizeTableColumn","label","startCase","Context","value","ScrollContainer","cx","ref","defaultProps","Object","assign","commonDefaultProps","RowProps","rowData","rowIndex","normalizedVisibleColumns","render","getEmptyCellData","format","cellData","undefined"],"mappings":"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","file":"ffde6866c469c1d59985.js","sourcesContent":["const startCase = str => str.replace( /([a-z])([A-Z])/g, \"$1 $2\" ).replace( /\\b[a-z]/g, x => x.toUpperCase() );\n\nexport default startCase;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_24qdqpq2QWr-ymEb1PSDPY\"};","import css from \"./style.module.scss\";\r\nimport useSubscription from \"hooks/useSubscription\";\r\nimport { START_INDEX } from \"constants/events\";\r\n\r\nconst E = [ START_INDEX ];\r\n\r\n/*\r\n    Hmm, I can't put here more than ~ 3 000 000. Maybe need to put one more row in case this height is > 3 000 000\r\n*/\r\nconst Scroller = () => useSubscription( API => (\r\n    <tbody\r\n        className={css.wrapper}\r\n        aria-hidden=\"true\"\r\n        style={{ height: API.virtualTopOffset }}\r\n    />\r\n), E );\r\n\r\nexport default Scroller;","import { memo } from \"react\";\r\nimport useSubscription from \"hooks/useSubscription\";\r\nimport { START_INDEX, END_INDEX } from \"constants/events\";\r\n\r\nconst E = [ START_INDEX, END_INDEX ];\r\n\r\nconst Rows = ({ columns, renderRow, Row, getRowData, getRowProps, renderCell, Cell }) => useSubscription( API => {\r\n\r\n    const { startIndex, endIndex } = API;\r\n\r\n    const result = [];\r\n\r\n    for( let i = startIndex; i < endIndex; i++ ){\r\n        result.push(renderRow({\r\n            index: i,\r\n            columns,\r\n            getRowData,\r\n            getRowProps,\r\n            renderCell,\r\n            Cell,\r\n            Row\r\n        }));\r\n    }\r\n\r\n    return result;\r\n}, E );\r\n\r\nexport default memo( Rows );","import { memo } from \"react\";\r\n\r\nconst Colgroup = ({ columns }) => (\r\n    <colgroup>\r\n        {columns.map(({ dataKey, background, border, width }) => (\r\n            <col\r\n                key={dataKey}\r\n                style={{\r\n                    width,\r\n                    background,\r\n                    border\r\n                }}\r\n            />\r\n        ))}\r\n    </colgroup>\r\n);\r\n\r\nexport default memo( Colgroup );","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_3xHZ6hLxyHZ-v8LLU1YA7y\",\"bodyTable\":\"_3VNLkND9VRhxpdmzEGLiXt\"};","import { memo, useState, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport commonDefaultProps from \"../common/defaultProps\";\r\n\r\nimport cx from \"utils/cx\";\r\nimport startCase from \"utils/startCase\";\r\n\r\nimport Context from \"Context\";\r\nimport useModel from \"hooks/useModel\";\r\nimport normalizeTableColumn from \"utils/normalizeTableColumn\";\r\n\r\nimport VariableHeightsStore from \"models/VariableSizeList\";\r\nimport FixedHeightsStore from \"models/FixedSizeList\";\r\n\r\nimport ScrollContainer from \"../common/ScrollContainer\";\r\n\r\nimport Scroller from \"./Scroller\";\r\nimport Rows from \"./Rows\";\r\nimport Colgroup from \"./Colgroup\";\r\n\r\nimport {\r\n    renderRow,\r\n    Row,\r\n    renderCell,\r\n    renderHeaderCells,\r\n    renderFooter,\r\n    Cell\r\n} from \"./renderers\";\r\n\r\nimport css from \"./style.module.scss\";\r\n\r\n/*\r\n    Todo:\r\n        * measure thead & tfoot heights in order to properly calculate available space for rows\r\n        * think about border-collapse offsetHeight issue ( maybe throw border-collapse )\r\n*/\r\n\r\nconst Table = ({\r\n    fixed,\r\n    estimatedRowHeight,\r\n    columns,\r\n    getRowData,\r\n    getRowProps,\r\n    renderRow,\r\n    Row,\r\n    renderCell,\r\n    renderHeaderCells,\r\n    renderFooter,\r\n    Cell,\r\n    rowsQuantity,\r\n    overscanRowsCount,\r\n    headless,\r\n    dataRef,\r\n    className,\r\n    ...props\r\n}) => {\r\n\r\n    const [ rowsContainerNode, rowsContainerRef ] = useState();\r\n\r\n    const Store = useModel(\r\n        fixed ? FixedHeightsStore : VariableHeightsStore,\r\n        dataRef,\r\n        estimatedRowHeight,\r\n        overscanRowsCount,\r\n        rowsQuantity,\r\n        rowsContainerNode\r\n    );\r\n    \r\n    const finalColumns = useMemo(() => columns.map( column => {\r\n        const col = normalizeTableColumn( column );\r\n        return {\r\n            label: startCase( col.dataKey ),\r\n            ...col\r\n        };\r\n    }), [ columns ]);\r\n        \r\n    return (\r\n        <Context.Provider value={Store}>\r\n            <ScrollContainer className={cx(css.wrapper,className)} {...props}>\r\n                <table className={css.bodyTable}>\r\n                    <Colgroup columns={finalColumns} />\r\n                    {headless ? null : (\r\n                        <thead>\r\n                            <tr>\r\n                                {renderHeaderCells(finalColumns)}\r\n                            </tr>\r\n                        </thead>\r\n                    )}\r\n                    <Scroller />\r\n                    <tbody ref={rowsContainerRef}>\r\n                        <Rows\r\n                            columns={finalColumns}\r\n                            getRowData={getRowData}\r\n                            getRowProps={getRowProps}\r\n                            Row={Row}\r\n                            renderRow={renderRow}\r\n                            renderCell={renderCell}\r\n                            Cell={Cell}\r\n                        />\r\n                    </tbody>\r\n                    {renderFooter( finalColumns )}\r\n                </table>\r\n            </ScrollContainer>\r\n        </Context.Provider>\r\n    );\r\n}\r\n\r\nTable.propTypes = {\r\n    rowsQuantity: PropTypes.number.isRequired,\r\n    className: PropTypes.string,\r\n    fixed: PropTypes.bool,\r\n    overscanRowsCount: PropTypes.number,\r\n    estimatedRowHeight: PropTypes.number,\r\n    columns: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n            PropTypes.string,\r\n                PropTypes.shape({\r\n                // unique key for column\r\n                dataKey: PropTypes.string.isRequired,\r\n\r\n                // for details see CellComponent implementation\r\n                getEmptyCellData: PropTypes.func,\r\n                format: PropTypes.func,\r\n                render: PropTypes.func,\r\n                formatTotal: PropTypes.func,\r\n                totals: PropTypes.string,\r\n\r\n                // column props, affecting colgroup > col tags\r\n                background: PropTypes.string,\r\n                border: PropTypes.string,\r\n                width: PropTypes.oneOfType([ PropTypes.number, PropTypes.string ]),\r\n                CellComponent: PropTypes.elementType,\r\n                getCellExtraProps: PropTypes.func\r\n            })\r\n        ])\r\n    ).isRequired,\r\n\r\n    getRowData: PropTypes.func.isRequired,\r\n    getRowProps: PropTypes.func,\r\n    renderFooter: PropTypes.func,\r\n    renderCell: PropTypes.func,\r\n    renderHeaderCells: PropTypes.func,\r\n    Row: PropTypes.elementType,\r\n    Cell: PropTypes.elementType,\r\n\r\n    headless: PropTypes.bool,\r\n};\r\n\r\n/*\r\n    Spread operator will kill pure annotation comment, and tree-shaking will fail.\r\n    So Object.assign is a must\r\n*/\r\nTable.defaultProps = /*#__PURE__*/ Object.assign({}, commonDefaultProps, {\r\n    headless: false,\r\n\r\n    renderRow,\r\n    Row,\r\n    renderCell,\r\n    renderHeaderCells,\r\n    renderFooter,\r\n    Cell\r\n});\r\n\r\nexport default memo( Table );","/*\n    If all cells in a row would be completely empty - row can \"collapse\" short.\n    To prevent it we can fill it with &nbsp;\n*/\nconst DEFAULT_EMPTY_CELL_CONTENT = \"\\u00A0\";\n\nexport const Row = ({ index, columns, getRowData, getRowProps, renderCell, Cell }) => {\n\n    const rowData = getRowData( index );\n\n    return (\n        <tr {...(getRowProps&&getRowProps(rowData,index))}>\n            {columns.map( column => renderCell( rowData, index, column, Cell ))}\n        </tr>\n    );\n}\n\nexport const renderRow = RowProps => <RowProps.Row key={RowProps.index} {...RowProps} />\n\nexport const renderCell = ( rowData, rowIndex, column, Cell ) => rowData ? (\n    <td key={column.dataKey}>\n        <Cell\n            rowData={rowData}\n            rowIndex={rowIndex}\n            column={column}\n        />\n    </td>\n) : null;\n\nexport const renderHeaderCells = columns => columns.map( column => (\n    <th key={column.dataKey}>\n        {column.label}\n    </th>\n));\n\nexport const renderFooter = normalizedVisibleColumns => null;\n\nexport const Cell = ({ rowData, rowIndex, column }) => {\n    const { render, getEmptyCellData, dataKey, format } = column;\n\n    let cellData = rowData[ dataKey ];\n    \n    if( cellData === undefined || cellData === \"\" ){\n        cellData = getEmptyCellData ? getEmptyCellData( rowIndex, column ) : DEFAULT_EMPTY_CELL_CONTENT;\n    }\n    else{\n        if( format ){\n            cellData = format( cellData, rowData );\n        }\n        if( render ){\n            cellData = render( cellData, rowData, rowIndex, column );\n        }\n    }\n\n    return cellData;\n}","const normalizeTableColumn = column => typeof column === \"string\" ? { dataKey: column } : column;\n\nexport default normalizeTableColumn;"],"sourceRoot":""}