{"version":3,"sources":["webpack://af-virtual-scroll/./src/components/List/Rows/index.js","webpack://af-virtual-scroll/./src/components/List/index.js","webpack://af-virtual-scroll/./src/examples/list/simple/index.js"],"names":["E","START_INDEX","END_INDEX","Rows","dataRef","renderRow","useSubscription","API","startIndex","endIndex","virtualTopOffset","result","i","push","ref","style","transform","memo","List","fixed","children","estimatedRowHeight","rowsQuantity","overscanRowsCount","props","rowsContainerNode","rowsContainerRef","useState","Store","useModel","FixedHeightsStore","VariableHeightsStore","Context","value","ScrollContainer","defaultProps","commonDefaultProps","wrapperStyle","minWidth","maxWidth","padding"],"mappings":";8QAIA,MAAMA,EAAI,CAAEC,KAAaC,MAEnBC,EAAO,EAAGC,UAASC,gBAAgBC,QAAiBC,IAEtD,MAAM,WAAEC,EAAF,SAAcC,EAAd,iBAAwBC,GAAqBH,EAC7CI,EAAS,GAEf,IAAK,IAAIC,EAAIJ,EAAYI,EAAIH,EAAUG,IACnCD,EAAOE,KAAMR,EAAWO,IAG5B,OACI,gBAAKE,IAAKV,EAASW,MAAO,CAAEC,UAAW,cAAcN,EAAhB,OAArC,SACKC,MAGVX,GAEH,GAAeiB,UAAMd,GCRfe,EAAQ,IAQR,IARQ,MACVC,EADU,SAEVC,EAFU,mBAGVC,EAHU,aAIVC,EAJU,kBAKVC,EALU,QAMVnB,GAEE,EADCoB,GACD,iGAEF,MAAQC,EAAmBC,IAAqBC,gBAE1CC,GAAQC,OACVV,EAAQW,IAAoBC,IAC5B3B,EACAiB,EACAE,EACAD,EACAG,GAGJ,OACI,SAACO,EAAA,WAAD,CAAkBC,MAAOL,EAAzB,UACI,SAACM,EAAA,EAAD,iBAAqBV,EAArB,WACI,SAAC,EAAD,CAAMpB,QAASsB,EAAkBrB,UAAWe,UAoB5DF,EAAKiB,aAAeC,IAEpB,SAAenB,UAAMC,I,qFCpDrB,MAAMmB,EAAe,CAAEC,SAAU,IAAKC,SAAU,KAQhD,EANmB,KACf,SAAC,IAAD,CAAMxB,MAAOsB,EAAcf,aAAc,IAAKD,mBAAoB,GAAlE,SACKT,IAAK,iBAAKG,MAAO,CAAEyB,QAAS,SAAvB,iBAA+C5B,IAARA","file":"07249ac86b7c9c526822.js","sourcesContent":["import { memo } from \"react\";\r\nimport { START_INDEX, END_INDEX } from \"constants/events\";\r\nimport useSubscription from \"hooks/useSubscription\";\r\n\r\nconst E = [ START_INDEX, END_INDEX ];\r\n\r\nconst Rows = ({ dataRef, renderRow }) => useSubscription( API => {\r\n\r\n    const { startIndex, endIndex, virtualTopOffset } = API;\r\n    const result = [];\r\n\r\n    for( let i = startIndex; i < endIndex; i++ ){\r\n        result.push( renderRow( i ) );\r\n    }\r\n\r\n    return (\r\n        <div ref={dataRef} style={{ transform: `translateY(${virtualTopOffset}px)` }}>\r\n            {result}\r\n        </div>\r\n    );\r\n}, E );\r\n\r\nexport default memo( Rows );","import { memo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Context from \"Context\";\r\nimport useModel from \"hooks/useModel\";\r\n\r\nimport VariableHeightsStore from \"models/VariableSizeList\";\r\nimport FixedHeightsStore from \"models/FixedSizeList\";\r\n\r\nimport ScrollContainer from \"../common/ScrollContainer\";\r\nimport commonDefaultProps from \"../common/defaultProps\";\r\n\r\nimport Rows from \"./Rows\";\r\n\r\nconst List = ({\r\n    fixed,\r\n    children,\r\n    estimatedRowHeight,\r\n    rowsQuantity,\r\n    overscanRowsCount,\r\n    dataRef,\r\n    ...props\r\n}) => {\r\n\r\n    const [ rowsContainerNode, rowsContainerRef ] = useState();\r\n\r\n    const Store = useModel(\r\n        fixed ? FixedHeightsStore : VariableHeightsStore,\r\n        dataRef,\r\n        estimatedRowHeight,\r\n        overscanRowsCount,\r\n        rowsQuantity,\r\n        rowsContainerNode\r\n    );\r\n\r\n    return (\r\n        <Context.Provider value={Store}>\r\n            <ScrollContainer {...props}>\r\n                <Rows dataRef={rowsContainerRef} renderRow={children} /> \r\n            </ScrollContainer>\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nList.propTypes = {\r\n    rowsQuantity: PropTypes.number.isRequired,\r\n    className: PropTypes.string,\r\n    fixed: PropTypes.bool,\r\n    overscanRowsCount: PropTypes.number,\r\n    estimatedRowHeight: PropTypes.number,\r\n\r\n    /**\r\n     * @param {number} rowIndex\r\n     * @returns {any} one row element child. Fragments are not supported.\r\n     */\r\n    children: PropTypes.func.isRequired\r\n}\r\n\r\nList.defaultProps = commonDefaultProps;\r\n\r\nexport default memo( List );","import { List } from \"af-virtual-scroll\";\n\n\n/*\n    Initial dimensions are not required, but flex-grow/min-width/smth. should be set,\n    because otherwise List may collapse to zero-width\n*/\n\nconst wrapperStyle = { minWidth: 200, maxWidth: 400 };\n\nconst SimpleList = () => (\n    <List style={wrapperStyle} rowsQuantity={100} estimatedRowHeight={20}>\n        {i => <div style={{ padding: \"0.5em\" }} key={i}>row {i}</div>}\n    </List>\n);\n\nexport default SimpleList;"],"sourceRoot":""}