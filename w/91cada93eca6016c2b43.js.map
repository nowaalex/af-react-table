{"version":3,"sources":["webpack://af-virtual-scroll/./src/Context.js","webpack://af-virtual-scroll/./src/components/common/HeightProvider/style.module.scss?9ac1","webpack://af-virtual-scroll/./src/components/common/HeightProvider/index.js","webpack://af-virtual-scroll/./src/components/common/ScrollContainer/style.module.scss?e713","webpack://af-virtual-scroll/./src/components/common/ScrollContainer/index.js","webpack://af-virtual-scroll/./src/constants/events.js","webpack://af-virtual-scroll/./src/hooks/useApi/index.js","webpack://af-virtual-scroll/./src/hooks/useModel/index.js","webpack://af-virtual-scroll/./src/hooks/useForceUpdate/index.js","webpack://af-virtual-scroll/./src/hooks/useSubscription/index.js","webpack://af-virtual-scroll/./src/models/FixedSizeList/index.js","webpack://af-virtual-scroll/./src/models/PubSub/index.js","webpack://af-virtual-scroll/./src/utils/throttle/index.js","webpack://af-virtual-scroll/./src/models/ListBase/index.js","webpack://af-virtual-scroll/./src/models/VariableSizeList/index.js","webpack://af-virtual-scroll/./src/utils/cx/index.js"],"names":["createContext","E","WIDGET_SCROLL_HEIGHT","useSubscription","API","className","css","style","height","widgetScrollHeight","ScrollContainer","children","props","ref","useRef","useApi","useEffect","el","current","setScrollContainerNode","R","ResizeObserver","entries","setWidgetHeight","Math","round","contentRect","observe","unobserve","tabIndex","cx","onScroll","e","setScrollTop","target","scrollTop","memo","START_INDEX","END_INDEX","ROWS_QUANTITY","EVENTS_ARRAY_LENGTH","useContext","Context","StoreConstructor","dataRef","estimatedRowHeight","overscanRowsCount","rowsQuantity","rowsContainerNode","finalDataRef","Store","startBatch","setViewParams","endBatch","destructor","increment","x","useReducer","callBack","events","prevRenderRef","forceUpdate","useForceUpdate","on","off","inBatch","queue","FixedSizeList","ListBase","setRowHeight","v","this","rowHeight","remeasure","constructor","super","measureRowsThrottled","getIndex","offset","trunc","getOffset","index","measureRows","firstElementChild","offsetHeight","_E","Array","from","length","_Q","Set","_on","shouldPrepend","fn","prototype","unshift","push","evt","call","prependListener","splice","clear","indexOf","cb","add","emit","ms","ctx","timer","invoke","throttled","setTimeout","cancel","clearTimeout","PubSub","node","scrollContainerNode","updateVisibleRange","widgetHeight","updateEndIndex","endIndex","min","startIndex","max","virtualTopOffset","updateWidgetScrollHeight","throttle","scrollToRow","rowIndex","VariableSizeList","rowHeights","fTree","msb","grow","Error","clz32","curRowHeighsLength","oldRowHeights","Uint32Array","set","fill","j","i","tempIndex","bitMask","result","updateRowHeight","delta","diff","cacheChanged","child","baseClass","extraClass"],"mappings":"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","file":"91cada93eca6016c2b43.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport default createContext();","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"a2uMg3Zj4kpPT6J8EoqLx\"};","import useSubscription from \"hooks/useSubscription\";\nimport css from \"./style.module.scss\";\nimport { WIDGET_SCROLL_HEIGHT } from \"constants/events\";\n\nconst E = [ WIDGET_SCROLL_HEIGHT ];\n\nconst HeightProvider = () => useSubscription( API => (\n    <div\n        className={css.wrapper}\n        style={{ height: API.widgetScrollHeight }}\n    />\n), E );\n\nexport default HeightProvider","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_3Jl24WrVf4wfsfDMBe4LVm\"};","import { useRef, memo, useEffect } from \"react\";\r\nimport cx from \"utils/cx\";\r\nimport useApi from \"hooks/useApi\";\r\nimport HeightProvider from \"../HeightProvider\";\r\nimport css from \"./style.module.scss\";\r\n\r\nconst ScrollContainer = ({ className, children, ...props }) => {\r\n\r\n    const ref = useRef();\r\n    const API = useApi();\r\n\r\n    useEffect(() => {\r\n        const el = ref.current;\r\n\r\n        API.setScrollContainerNode( el );\r\n\r\n        const R = new ResizeObserver( entries => {\r\n            API.setWidgetHeight( Math.round( entries[ 0 ].contentRect.height ) );\r\n        });\r\n\r\n        R.observe( el );\r\n\r\n        return () => R.unobserve( el );\r\n    }, []);\r\n    \r\n    /*\r\n        tabIndex=\"0\" is for proper keyboard nav\r\n        https://bugzilla.mozilla.org/show_bug.cgi?id=1346159\r\n    */\r\n    return (\r\n        <div\r\n            {...props}\r\n            ref={ref}\r\n            tabIndex=\"0\"\r\n            className={cx(css.wrapper,className)}\r\n            ref={ref}\r\n            onScroll={e => API.setScrollTop( e.target.scrollTop )}\r\n        >\r\n            <HeightProvider />\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default memo( ScrollContainer );","export const START_INDEX                = 0;\nexport const END_INDEX                  = 1;\nexport const ROWS_QUANTITY              = 2;\nexport const WIDGET_SCROLL_HEIGHT       = 3;\n\nexport const EVENTS_ARRAY_LENGTH        = 4;","import { useContext } from \"react\";\nimport Context from \"../../Context\";\n\nconst useApi = () => useContext( Context );\n\nexport default useApi;","import { useRef, useEffect } from \"react\";\n\n/*\n    dataRef is to call Data methods from outside( Data.scrollTo(), etc. ).\n    As it is not dom-related, I decided to avoid forwardRef\n*/\nconst useStore = ( StoreConstructor, dataRef, estimatedRowHeight, overscanRowsCount, rowsQuantity, rowsContainerNode ) => {\n\n    const finalDataRef = useRef();\n\n    let Store = finalDataRef.current;\n\n    if( !( Store instanceof StoreConstructor ) ){\n        Store = finalDataRef.current = new StoreConstructor();\n    }\n\n    if( dataRef ){\n        dataRef.current = Store;\n    }\n\n    Store.startBatch().setViewParams( estimatedRowHeight, overscanRowsCount, rowsQuantity, rowsContainerNode );\n\n    useEffect(() => {\n        Store.endBatch();\n    });\n    \n    useEffect(() => () => Store.destructor(), [ Store ]);\n\n    return Store;\n};\n\nexport default useStore;","import { useReducer } from \"react\";\n\nconst increment = x => x + 1;\n\nconst useForceUpdate = () => useReducer( increment, 0 )[ 1 ];\n\nexport default useForceUpdate;","import { useRef, useEffect } from \"react\";\nimport useForceUpdate from \"../useForceUpdate\";\nimport useApi from \"../useApi\";\n\nconst useSubscription = ( callBack, events ) => {\n    \n    const prevRenderRef = useRef( null );\n    const API = useApi();\n    const forceUpdate = useForceUpdate();\n    \n    useEffect(() => {\n        API.on( forceUpdate, ...events );\n        return () => API.off( forceUpdate, ...events );\n    }, events );\n\n    if( API.inBatch ){\n        /*\n            Somebody tried to rerender, while we were in batch.\n            On batch finish component definitely must be rerendered.\n        */\n        API.queue( forceUpdate );\n    }\n    else{\n        prevRenderRef.current = callBack( API );\n    }\n    \n    return prevRenderRef.current;\n}\n\nexport default useSubscription;","import ListBase from \"../ListBase\";\n\nimport { ROWS_QUANTITY } from \"constants/events\";\n\nclass FixedSizeList extends ListBase {\n\n    rowHeight = 0;\n\n    setRowHeight( v ){\n        if( v !== this.rowHeight ){\n            this.rowHeight = v;\n            this.remeasure();\n        }\n    }\n\n    constructor(){\n        super();\n\n        this.on( this.measureRowsThrottled, ROWS_QUANTITY );\n    }\n\n\n    getIndex( offset ){\n        /* rounding via bitwise hacks like |0 may not work here, because number may be > max(int32) */\n        return this.rowHeight && Math.trunc( offset / this.rowHeight );\n    }\n\n    getOffset( index ){\n        return index * this.rowHeight;\n    }\n\n    measureRows(){\n        if( this.rowsContainerNode && this.rowsQuantity ){\n            this.setRowHeight( this.rowsContainerNode.firstElementChild?.offsetHeight || 0 );\n        }\n    }    \n}\n\nexport default FixedSizeList;","import { EVENTS_ARRAY_LENGTH } from \"constants/events\";\n\nclass PubSub {\n\n    /* All callbacks are known in advance, so we can allocate in construcror */\n    _E = Array.from({ length: EVENTS_ARRAY_LENGTH }, () => []);\n\n    /* query of callbacks, that should run after batch end */\n    _Q = new Set();\n\n    /* depth of batch */\n    inBatch = 0;\n\n    _on( callBack, events, shouldPrepend ){\n        const fn = shouldPrepend ? Array.prototype.unshift : Array.prototype.push;\n        for( let evt of events ){\n            fn.call( this._E[ evt ], callBack );\n        }\n        return this;\n    }\n\n    on( callBack, ...events ){\n        return this._on( callBack, events, false );\n    }\n\n    prependListener( callBack, ...events ){\n        return this._on( callBack, events, true );\n    }\n\n    destructor(){\n        for( let events of this._E ){\n            events.splice( 0 );\n        }\n        this._Q.clear();\n    }\n\n    off( callBack, ...events ){\n        for( let evt of events ){\n            this._E[ evt ].splice( this._E[ evt ].indexOf( callBack ) >>> 0, 1 );\n        }\n        return this;\n    }\n\n    queue( cb ){\n        if( process.env.NODE_ENV !== \"production\" ){\n            if( !this.inBatch ){\n                console.error( \"trying to add event to batch queue, while inBatch is 0\" );\n            }\n        }\n        this._Q.add( cb );\n    }\n\n    emit( evt ){\n        if( this.inBatch ){\n            for( let cb of this._E[ evt ] ){\n                this._Q.add( cb );\n            }\n        }\n        else{\n            for( let cb of this._E[ evt ] ){\n                cb.call( this );\n            }\n        }\n        return this;\n    }\n\n    /* inspired by mobx */\n\n    startBatch(){\n        this.inBatch++;\n        return this;\n    }\n\n    endBatch(){\n        if( !--this.inBatch ){\n            for( let cb of this._Q ){\n                cb.call( this );\n            }\n            this._Q.clear();\n        }\n        return this;\n    }\n}\n\nexport default PubSub;","const throttle = ( fn, ms, ctx ) => {\n    let timer = 0;\n\n    const cancel = () => {\n        clearTimeout( timer );\n        timer = 0;\n    }\n\n    const invoke = () => {\n        timer = 0;\n        fn.call( ctx );\n    }\n\n    const throttled = () => {\n        if( timer === 0 ){\n            timer = setTimeout( invoke, ms );\n        }\n    }\n\n    throttled.cancel = cancel;\n\n    return throttled;\n}\n\nexport default throttle;","import PubSub from \"../PubSub\";\nimport throttle from \"utils/throttle\";\n\nimport {\n    START_INDEX,\n    END_INDEX,\n    ROWS_QUANTITY,\n    WIDGET_SCROLL_HEIGHT,\n} from \"constants/events\";\n\nclass ListBase extends PubSub {\n\n    /* Provided from renderer */\n    scrollTop = 0;\n    rowsQuantity = 0;\n    /* must not be >= 1 */\n    overscanRowsCount = 2;\n    widgetHeight = 0;\n    estimatedRowHeight = 0;\n    rowsContainerNode = null;\n    scrollContainerNode = null;\n\n    setScrollContainerNode( node ){\n        this.scrollContainerNode = node;\n    }\n\n    setScrollTop( v ){\n        if( v !== this.scrollTop ){\n            this.scrollTop = v;\n            this.updateVisibleRange();\n        }\n    }\n\n    setWidgetHeight( height ){\n        if( height !== this.widgetHeight ){\n            this.widgetHeight = height;\n            this.updateEndIndex();\n        }\n\n        this.measureRowsThrottled();\n    }\n\n    updateEndIndex(){\n        const endIndex = Math.min( this.rowsQuantity, this.getIndex( this.scrollTop + this.widgetHeight ) + this.overscanRowsCount );\n\n        if( endIndex !== this.endIndex ){\n            this.endIndex = endIndex;\n            this.emit( END_INDEX );\n        }\n\n        return this;\n    }\n\n    updateVisibleRange(){\n\n        const startIndex = Math.max( 0, Math.min( this.rowsQuantity, this.getIndex( this.scrollTop ) ) - this.overscanRowsCount );\n\n        if( startIndex !== this.startIndex ){\n            this.startIndex = startIndex;\n            this.virtualTopOffset = this.getOffset( startIndex );\n            this.emit( START_INDEX );\n        }\n\n        return this.updateEndIndex();\n    }\n\n\n    /* must be called when row height/heights change */\n    remeasure(){\n        return this\n            .updateWidgetScrollHeight()\n            .updateVisibleRange();\n    }\n\n    constructor(){\n        super()\n\n        this\n            .on( this.updateWidgetScrollHeight, ROWS_QUANTITY )\n            .on( this.updateEndIndex, ROWS_QUANTITY );\n    }\n\n    destructor(){\n        this.measureRowsThrottled.cancel();\n        super.destructor();\n    }\n\n    scrollToRow( rowIndex ){\n        if( this.scrollContainerNode ){\n            this.scrollContainerNode.scrollTop = this.getOffset( rowIndex );\n        }\n        else if( process.env.NODE_ENV !== \"production\" ){\n            console.error( \"scrollContainerNode is not set\" );\n        }\n    }\n\n    updateWidgetScrollHeight(){\n        const v = this.getOffset( this.rowsQuantity );\n        if( v !== this.widgetScrollHeight ){\n            this.widgetScrollHeight = v;\n            this.emit( WIDGET_SCROLL_HEIGHT );\n        }\n        return this;\n    }\n\n    \n\n    setViewParams( estimatedRowHeight, overscanRowsCount, rowsQuantity, rowsContainerNode ){\n\n        this.estimatedRowHeight = estimatedRowHeight;\n        this.rowsContainerNode = rowsContainerNode;\n\n        this.startBatch();\n\n        if( overscanRowsCount !== this.overscanRowsCount ){\n            this.overscanRowsCount = overscanRowsCount;\n            this.queue( this.updateVisibleRange );\n        }\n\n        if( rowsQuantity !== this.rowsQuantity ){\n            this.rowsQuantity = rowsQuantity;\n            this.emit( ROWS_QUANTITY );\n        }\n\n        this.endBatch();\n    }\n\n    measureRowsThrottled = throttle( this.measureRows, 200, this );\n\n    /* Calculated inside model */\n    startIndex = 0;\n    endIndex = 0;\n    virtualTopOffset = 0;\n    widgetScrollHeight = 0;\n}\n\nexport default ListBase;","import ListBase from \"../ListBase\";\n\nimport {\n    ROWS_QUANTITY,\n    START_INDEX,\n    END_INDEX,\n} from \"constants/events\";\n\nclass VariableSizeList extends ListBase {\n    \n    rowHeights = [];\n    fTree = [];\n\n    /*\n        most significant bit of this.rowsQuantity;\n        caching it to avoid Math.clz32 calculations on every getIndex call\n    */\n    msb = 0;\n    \n    constructor(){\n        super();\n\n        this\n            /* must be done before events, attached in ListBase */\n            .prependListener( this.grow, ROWS_QUANTITY )\n            .on( this.measureRowsThrottled, START_INDEX, END_INDEX );            \n    }\n\n    grow(){\n        const { rowsQuantity } = this;\n\n        if( rowsQuantity < 0 || rowsQuantity > 0x7fffffff ){\n            throw new Error( `Wrong rowsQuantity: ${rowsQuantity}. Must be 0...2_147_483_647.` )\n        }\n\n        this.msb = rowsQuantity && 1 << 31 - Math.clz32( rowsQuantity );\n\n        const curRowHeighsLength = this.rowHeights.length;\n\n        if( rowsQuantity > curRowHeighsLength ){\n\n            const oldRowHeights = this.rowHeights;\n            \n            this.rowHeights = new Uint32Array( rowsQuantity );\n            this.fTree = new Uint32Array( rowsQuantity + 1 );\n\n            this.rowHeights.set( oldRowHeights );\n            this.rowHeights.fill( this.estimatedRowHeight, curRowHeighsLength );\n\n\n            /* \n                Creating fenwick tree from an array in linear time;\n                It is much more efficient, than calling updateRowHeight N times.\n            */\n\n            this.fTree.set( this.rowHeights, 1 );\n\n            for( let i = 1, j; i <= rowsQuantity; i++ ){\n                j = i + ( i & -i );\n                if( j <= rowsQuantity ){\n                    this.fTree[ j ] += this.fTree[ i ];\n                }\n            }\n\n            this.remeasure();\n        }        \n    }\n\n    getIndex( offset ){\n        let index = 0;\n        \n        for( let bitMask = this.msb, tempIndex; bitMask !== 0; bitMask >>= 1 ){\n            tempIndex = index + bitMask;\n            if( tempIndex > this.rowsQuantity ){\n                continue;\n            }\n            if( offset === this.fTree[ tempIndex ] ){\n                return tempIndex;\n            }\n            if( offset > this.fTree[ tempIndex ] ) {\n                offset -= this.fTree[ tempIndex ];\n                index = tempIndex;\n            }\n        }\n\n        return index;\n    }\n\n    getOffset( index ){\n        if( process.env.NODE_ENV !== \"production\" ){\n            if( index > this.rowsQuantity ){\n                throw new Error( \"index must not be > rowsQuantity\" );\n            }\n        }\n\n        let result = 0;\n\n        for ( ; index > 0; index -= index & -index ){\n            result += this.fTree[ index ];\n        }\n\n        return result;\n    }\n\n    /*\n        i starts from 1 here;\n\n        TODO:\n            * we can put < this.rowsQuantity here, but in this case grow must be optimized\n    */\n    updateRowHeight( i, delta ){\n        for ( ; i < this.fTree.length; i += i & -i ){\n            this.fTree[ i ] += delta;\n        }\n    }\n\n    measureRows(){\n        const node = this.rowsContainerNode;\n\n        if( node ){\n\n            let index = this.startIndex,\n                diff,\n                cacheChanged = false;\n\n            for( let child of node.children ){\n     \n                diff = child.offsetHeight - this.rowHeights[ index ];\n\n                if( diff ){\n                    cacheChanged = true;\n                    this.rowHeights[ index ] += diff;\n\n                    /*\n                        TODO:\n                            maybe buffer these updates somehow?\n                    */\n                    this.updateRowHeight( index + 1, diff );                  \n                }\n                \n                index++;\n            }\n\n            if( cacheChanged ){\n                this.remeasure();\n            }\n        }\n    }\n}\n\nexport default VariableSizeList;","const cx = ( baseClass, extraClass ) => extraClass ? `${baseClass} ${extraClass}` : baseClass;\r\n\r\nexport default cx;"],"sourceRoot":""}