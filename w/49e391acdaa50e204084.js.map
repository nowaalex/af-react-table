{"version":3,"sources":["webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/multiGroupBy/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/getSorter/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/sortGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/flattenGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/index.js","webpack://af-virtual-scroll/./src/components/ComplexTable/style.module.scss?b8c6","webpack://af-virtual-scroll/./src/components/ComplexTable/index.js","webpack://af-virtual-scroll/./src/examples/complexTable(unstable)/basic/index.js"],"names":["indexesArray","groupDataKeysList","getRowData","priorityGroupValuesArray","lastGroupIndex","length","lastGroupDataKey","groupsMap","Map","rowIndex","row","tmpInnerObject","cellValue","innerObject","i","get","priorityValue","has","set","push","sortDataKey","sortDirection","a","b","row1","row2","v1","v2","sortGroups","depth","currentDepth","groupValues","values","group","sortCallback","getSorter","sort","flattenGroups","collapsedGroups","prefix","rowIndexes","idx","groupValue","subGroup","concatenated","concat","Array","isArray","apply","this","columns","filter","col","groupKeys","includes","dataKey","map","find","c","priorityGroupValues","setFiltering","value","filtersMap","toLowerCase","delete","toggleCompact","compact","setSorting","setGrouping","dataKeysArray","addGrouping","clear","toggleCollapsedGroup","add","removeGrouping","indexOf","splice","from","rowsQuantity","v","multiGroupBy","filteredIndexes","grouped","groupedSorted","orderedIndexes","size","flattenedGroups","hasGrouping","groupsSortedIndexes","noGroupsSortedIndexes","constructor","Set","makeAutoObservable","visibleColumns","computed","equals","comparer","finalIndexes","merge","propertiesObj","Object","assign","HeaderLabel","observer","m","label","collectedProps","dragRef","useDrag","item","type","ref","className","css","onClick","aria-sort","undefined","data-collapsed","HeaderInput","onChange","e","target","getCount","total","nested","getSum","j","SummaryCell","column","totals","sum","fn","formatTotal","format","GroupsPanel","dropRef","useDrop","accept","drop","groupKey","onDoubleClick","GroupCell","isCollapsed","groupPath","getGroupLabel","Fragment","style","marginLeft","path","reduce","res","key","ComplexTable","props","useState","RowsAggregator","useEffect","initialGroupingKeys","slice","initialGrouingIndex","initialGroupingIndex","DndProvider","backend","HTML5Backend","cx","Table","renderRow","RowProps","realRowIndex","index","colSpan","Row","renderHeaderCells","renderTfootContent","normalizedVisibleColumns","some","rows","fixedRange","firstName","faker","lastName","country","estimatedRowHeight","render","cellData","color","textAlign","lineHeight","background"],"mappings":"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","file":"49e391acdaa50e204084.js","sourcesContent":["const multiGroupBy = ( indexesArray, groupDataKeysList, getRowData, priorityGroupValuesArray ) => {\n\n    const lastGroupIndex = groupDataKeysList.length - 1;\n\n    if( process.env.NODE_ENV !== \"production\" ){\n        if( lastGroupIndex < 0 ){\n            throw new Error( \"lastGroupIndex < 0\" );\n        }\n    }\n\n    const lastGroupDataKey = groupDataKeysList[ lastGroupIndex ];\n    const groupsMap = new Map();\n   \n\n    for( let rowIndex of indexesArray ){\n        /*\n            It is better to start from indexes iteration, not from groups, to minimize getRowData calls\n        */\n        const row = getRowData( rowIndex );\n\n        if( !row ){\n            continue;\n        }\n\n        let innerObject = groupsMap,\n            tmpInnerObject,\n            cellValue;\n\n        /*\n            We could put everything in one loop, but last iteration is different.\n        */\n        for( let i = 0; i < lastGroupIndex; i++ ){\n            cellValue = row[ groupDataKeysList[ i ] ];\n            tmpInnerObject = innerObject.get( cellValue );\n            if( !tmpInnerObject ){\n                tmpInnerObject = new Map();\n                for( let priorityValue of priorityGroupValuesArray[ i ] ){\n                    if( !innerObject.has( priorityValue ) ){\n                        innerObject.set( priorityValue, null );\n                    }\n                }\n                innerObject.set( cellValue, tmpInnerObject );\n            }\n            innerObject = tmpInnerObject;\n        }\n\n        cellValue = row[ lastGroupDataKey ];\n        tmpInnerObject = innerObject.get( cellValue );\n\n        if( tmpInnerObject ){\n            tmpInnerObject.push( rowIndex );\n        }\n        else {\n            for( let priorityValue of priorityGroupValuesArray[ lastGroupIndex ] ){\n                if( !innerObject.has( priorityValue  ) ){\n                    innerObject.set( priorityValue, null );\n                }\n            }\n            innerObject.set( cellValue, [ rowIndex ]);\n        }\n    }\n\n    return groupsMap;\n}\n\nexport default multiGroupBy;","const getSorter = ( getRowData, sortDataKey, sortDirection ) => ( a, b ) => {\n    const row1 = getRowData( a );\n    const row2 = getRowData( b );\n\n    if( row1 && row2 ){\n        const v1 = row1[ sortDataKey ];\n        const v2 = row2[ sortDataKey ];\n        return v1 > v2 ? sortDirection : v1 < v2 ? -sortDirection : 0;\n    }\n\n    return row1 ? sortDirection : row2 ? -sortDirection : 0;\n}\n\nexport default getSorter;","import getSorter from \"../getSorter\";\n\nconst sortGroups = ( groupsMap, getRowData, sortDataKey, sortDirection, depth, currentDepth = 0 ) => {\n\n    const groupValues = groupsMap.values();\n\n    if( currentDepth < depth - 1 ){\n        for( let group of groupValues ){\n            if( group ){\n                sortGroups( group, getRowData, sortDataKey, sortDirection, depth, currentDepth + 1 );\n            }\n        }\n    }\n    else{\n        const sortCallback = getSorter( getRowData, sortDataKey, sortDirection );\n\n        for( let group of groupValues ){\n            if( group ){\n                group.sort( sortCallback );\n            }\n        }\n    }\n}\n\nexport default sortGroups;","const flattenGroups = ( groupsMap, collapsedGroups, prefix = [], groupValues = [], rowIndexes = [] ) => {\n    let idx;\n    for( let [ groupValue, subGroup ] of groupsMap ){\n        if( subGroup ){\n            const concatenated = prefix.concat( groupValue );\n            idx = -groupValues.push( concatenated );\n            rowIndexes.push( idx );\n            if( !collapsedGroups.has( idx ) ){\n                if( Array.isArray( subGroup ) ){\n                    rowIndexes.push.apply( rowIndexes, subGroup );\n                }\n                else{\n                    flattenGroups( subGroup, collapsedGroups, concatenated, groupValues, rowIndexes );\n                }\n            }\n        }\n    }\n\n    return { groupValues, rowIndexes };\n}\n\nexport default flattenGroups;","import { makeAutoObservable, comparer, computed } from \"mobx\"; \nimport multiGroupBy from \"./utils/multiGroupBy\";\nimport sortGroups from \"./utils/sortGroups\";\nimport flattenGroups from \"./utils/flattenGroups\";\nimport getSorter from \"./utils/getSorter\";\n\nclass RowsAggregator {\n\n    /* Provided from renderer */\n    rowsQuantity = 0;\n    getRowData = null;\n    columns = [];\n    compact = true;\n\n    /* Calculated inside model */\n    filtersMap = new Map();\n    groupKeys = [];\n    sortDataKey = \"\";\n    sortDirection = -1;\n\n    collapsedGroups = new Set();\n\n    get visibleColumns(){\n        return this.columns.filter( col => !this.groupKeys.includes( col.dataKey ) );\n    }\n\n    get priorityGroupValuesArray(){\n        return this.groupKeys.map( dataKey => this.columns.find( c => c.dataKey === dataKey ).priorityGroupValues || [] );\n    }\n\n    setFiltering( dataKey, value ){\n        if( value ){\n            this.filtersMap.set( dataKey, value.toLowerCase() );\n        }\n        else{\n            this.filtersMap.delete( dataKey );\n        }\n    }\n\n    toggleCompact(){\n        this.compact = !this.compact;\n    }\n\n    setSorting( dataKey ){\n        if( this.sortDataKey === dataKey ){\n            this.sortDirection *= -1;\n        }\n        this.sortDataKey = dataKey;\n    }\n\n    setGrouping( dataKeysArray ){\n        this.groupKeys = dataKeysArray;\n    }\n\n    addGrouping( dataKey ){\n        if( !this.groupKeys.includes( dataKey ) ){\n            this.groupKeys.push( dataKey );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    toggleCollapsedGroup( idx ){\n        if( this.collapsedGroups.has( idx ) ){\n            this.collapsedGroups.delete( idx );\n        }\n        else{\n            this.collapsedGroups.add( idx );\n        }\n    }\n\n    removeGrouping( dataKey ){\n        const idx = this.groupKeys.indexOf( dataKey );\n        if( idx !== -1 ){\n            this.groupKeys.splice( idx, 1 );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    get orderedIndexes(){\n        return Array.from({ length: this.rowsQuantity }, ( v, i ) => i );\n    }\n\n    get grouped(){\n        return multiGroupBy( this.filteredIndexes, this.groupKeys, this.getRowData, this.priorityGroupValuesArray );\n    }\n\n    get groupedSorted(){\n        if( this.sortDataKey ){\n            sortGroups( this.grouped, this.getRowData, this.sortDataKey, this.sortDirection, this.groupKeys.length );\n        }\n        return this.grouped;\n    }\n\n    get flattenedGroups(){\n        return flattenGroups( this.groupedSorted, this.collapsedGroups );\n    }\n\n    get filteredIndexes(){\n        const { filtersMap, orderedIndexes } = this;\n        if( this.filtersMap.size ){\n            const filteredIndexesArray = orderedIndexes.filter( idx => {\n                const row = this.getRowData( idx );\n                if( !row ){\n                    return false;\n                }\n                for( let [ dataKey, value ] of filtersMap ){\n                    if( !( \"\" + row[ dataKey ] ).toLowerCase().includes( value ) ){\n                        return false;\n                    }\n                }\n                return true;\n            });\n\n            return filteredIndexesArray;\n        }\n        return orderedIndexes;\n    }\n\n    \n    get noGroupsSortedIndexes(){\n        return this.sortDataKey ? this.filteredIndexes.sort( getSorter( this.getRowData, this.sortDataKey, this.sortDirection ) ) : this.filteredIndexes;\n    }\n\n    get groupsSortedIndexes(){\n        return this.flattenedGroups.rowIndexes;\n    }\n\n    get hasGrouping(){\n        return !!this.groupKeys.length;\n    }\n\n    get finalIndexes(){\n        return this.hasGrouping ? this.groupsSortedIndexes : this.noGroupsSortedIndexes;\n    }\n\n    constructor(){\n        makeAutoObservable( this, {\n            visibleColumns: computed({ equals: comparer.structural }),\n            priorityGroupValuesArray: computed({ equals: comparer.structural }),\n            groupedSorted: computed({ equals: () => false }),\n            groupsSortedIndexes: computed({ equals: () => false }),\n            noGroupsSortedIndexes: computed({ equals: () => false }),\n            finalIndexes: computed({ equals: () => false }),\n            filteredIndexes: computed({ equals: () => false }),\n            orderedIndexes: computed({ equals: () => false })\n        });\n    }\n\n    merge( propertiesObj ){\n        Object.assign( this, propertiesObj );\n    }\n}\n\nexport default RowsAggregator;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_2B3KY_2EhDdLzl3od9PxI3\",\"noUserSelect\":\"_2S2SLB_JTzTB3lBY1T4ZW1\",\"sortableHeader\":\"_3xhCMieeqyydLLrsB_Rjwr _2S2SLB_JTzTB3lBY1T4ZW1\",\"input\":\"_7PdTV3zpJzO5l3JPCJbaz\",\"groupsPanel\":\"_24CQvBWd2KIxalcwIBcG6S\",\"groupLabel\":\"_1Pfh0g4BE_cuNHu46ByRkY _2S2SLB_JTzTB3lBY1T4ZW1\",\"compactToggler\":\"_3KQQrpclW23r77-lYRKeHq _2S2SLB_JTzTB3lBY1T4ZW1\",\"groupToggler\":\"_2t1GlnfqduCsfI_X7Q0BSx _2S2SLB_JTzTB3lBY1T4ZW1\",\"columnSummaries\":\"QsUrLMXUKybinaPXO0z0B\"};","import { Fragment, useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport RowsAggregator from \"models/RowsAggregator\";\nimport Table from \"../Table\";\nimport cx from \"utils/cx\";\nimport css from \"./style.module.scss\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\n\nconst HEADER_DND_TYPE = \"h\";\n\nconst HeaderLabel = /*#__PURE__*/ observer(({ m, dataKey, label, i }) => {\n\n    const [ collectedProps, dragRef ] = useDrag({ item: {\n        type: HEADER_DND_TYPE,\n        dataKey\n    }});\n\n    return (\n        <div\n            ref={dragRef}\n            className={css.sortableHeader}\n            onClick={() => m.setSorting( dataKey )}\n            aria-sort={m.sortDataKey === dataKey?(m.sortDirection===1?\"ascending\":\"descending\"):undefined}\n        >\n            {i === 0 ? <span data-collapsed={m.compact?\"\":undefined} onClick={() => m.toggleCompact()} className={css.compactToggler} /> : null}\n            {label}\n        </div>\n    );\n});\n\nconst HeaderInput = /*#__PURE__*/ observer(({ m, dataKey }) => m.compact ? null : (\n    <input\n        className={css.input}\n        value={m.filtersMap.get( dataKey )||\"\"}\n        onChange={e => m.setFiltering( dataKey, e.target.value )}\n    />\n));\n\nconst getCount = rowIndexes => {\n\n    let total = 0;\n\n    if( Array.isArray( rowIndexes ) ){\n        total += rowIndexes.length;\n    }\n    else {\n        for( let nested of rowIndexes.values() ){\n            if( nested ){\n                total += getCount( nested );\n            }\n        }\n    }\n\n    return total;\n}\n\nconst getSum = ( rowIndexes, dataKey, getRowData ) => {\n\n    let total = 0;\n\n    if( Array.isArray( rowIndexes ) ){\n        let row;\n        for( let j of rowIndexes ){\n            row = getRowData( j );\n            if( row ){\n                total += row[ dataKey ];\n            }\n        }\n    }\n    else {\n        for( let nested of rowIndexes.values() ){\n            if( nested ){\n                total += getSum( nested, dataKey, getRowData );\n            }\n        }\n    }\n\n    return total;\n}\n\nconst SummaryCell = /*#__PURE__*/ observer(({ m, column, rowIndexes }) => {\n\n    if( column.totals === \"count\" ){\n        return getCount( rowIndexes );\n    }\n\n    if( column.totals === \"sum\" ){\n        const sum = getSum( rowIndexes, column.dataKey, m.getRowData );\n        const fn = column.formatTotal || column.format;\n        return fn ? fn( sum ) : sum;\n    }\n\n    return null;\n});\n\nconst GroupsPanel = /*#__PURE__*/ observer(({ m }) => {\n\n    const [ collectedProps, dropRef ] = useDrop({\n        accept: HEADER_DND_TYPE,\n        drop( item ){\n            m.addGrouping( item.dataKey );\n        }\n    });\n\n    return m.compact ? null : (\n        <div className={css.groupsPanel} ref={dropRef}>\n            {m.groupKeys.length ? m.groupKeys.map( groupKey => (\n                <div className={css.groupLabel} key={groupKey} onDoubleClick={() => m.removeGrouping( groupKey )}>\n                    {m.columns.find( col => col.dataKey === groupKey ).label }\n                </div>\n            )) : \"Drag column headers here to group by column\" }\n        </div>\n    );\n});\n\nconst getInMap = ( map, path ) => path.reduce(( res, key ) => res.get( key ), map );\n\nconst GroupCell = /*#__PURE__*/ observer(({ m, columns, idx }) => {\n\n    const isCollapsed = m.collapsedGroups.has( idx );\n\n    if( m.hasGrouping ){\n\n        const groupPath = m.flattenedGroups.groupValues[~idx];\n\n        if( groupPath ){\n\n            const lastGroupIndex = groupPath.length - 1;\n            const groupKey = m.groupKeys[lastGroupIndex];\n            /* hidden columns also must be included */\n            const { getGroupLabel, label } = m.columns.find( c => c.dataKey === groupKey );\n            const groupValue = groupPath[lastGroupIndex];\n\n            return (\n                <Fragment>\n                    <span\n                        className={css.groupToggler}\n                        onClick={() => m.toggleCollapsedGroup( idx )}\n                        data-collapsed={isCollapsed?\"\":undefined}\n                        style={{\n                            marginLeft: `${(lastGroupIndex)*2}em`\n                        }}\n                    />\n                    &nbsp;\n                    {getGroupLabel?getGroupLabel(groupValue):(\n                        <Fragment>\n                            {label}:&nbsp;{\"\"+groupValue}\n                        </Fragment>\n                    )}\n                    {columns.length ? (\n                        <span className={css.columnSummaries}>\n                            {columns.map( col => col.totals ? (\n                                <span key={col.dataKey}>\n                                    {col.label}:\n                                    &nbsp;\n                                    <SummaryCell\n                                        m={m}\n                                        column={col}\n                                        rowIndexes={getInMap(m.grouped,groupPath)}\n                                    />\n                                </span>\n                            ) : null)}\n                        </span>\n                    ) : null}\n                </Fragment>\n            );\n        }\n        \n    }\n\n    return null;\n});\n\nconst ComplexTable = ({ rowsQuantity, getRowData, className, columns, ...props }) => {\n\n    const [ m ] = useState(() => new RowsAggregator());\n\n    const { finalIndexes } = m;\n\n    const renderRow = RowProps => {\n\n        const realRowIndex = finalIndexes[ RowProps.index ];\n\n        return realRowIndex < 0 ? (\n            <tr key={RowProps.index}>\n                <td colSpan={RowProps.columns.length}>\n                    <GroupCell m={m} idx={realRowIndex} columns={RowProps.columns} />\n                </td>\n            </tr>\n        ) : (\n            <RowProps.Row\n                {...RowProps}\n                key={RowProps.index}\n                index={realRowIndex}\n            />\n        );\n    }\n\n    const renderHeaderCells = columns => columns.map(({ dataKey, label }, i ) => (\n        <th key={dataKey}>\n            <HeaderLabel m={m} dataKey={dataKey} label={label} i={i} />\n            <HeaderInput m={m} dataKey={dataKey} />\n        </th>\n    ));\n\n    useEffect(() => m.merge({ rowsQuantity, getRowData, columns }));\n\n    useEffect(() => {\n        const initialGroupingKeys = m.visibleColumns\n            .slice()\n            .sort(( a, b ) => ( a.initialGrouingIndex || 0 ) - ( b.initialGrouingIndex || 0 ) )\n            .filter( col => col.initialGroupingIndex )\n            .map( col => col.dataKey );\n\n        m.setGrouping( initialGroupingKeys );\n    }, []);\n\n    const renderTfootContent = normalizedVisibleColumns => normalizedVisibleColumns.some( col => !!col.totals ) ? (\n        <tr>\n            {normalizedVisibleColumns.map( col => (\n                <td key={col.dataKey}>\n                    <SummaryCell m={m} column={col} rowIndexes={m.filteredIndexes} />\n                </td>\n            ))}\n        </tr>\n    ) : null;\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className={cx(css.wrapper,className)}>\n                <GroupsPanel m={m} />\n                <Table\n                    columns={m.visibleColumns}\n                    rowsQuantity={finalIndexes.length}\n                    getRowData={getRowData}\n                    renderRow={renderRow}\n                    renderHeaderCells={renderHeaderCells}\n                    renderTfootContent={renderTfootContent}\n                    {...props}\n                />\n            </div>\n        </DndProvider> \n    );\n}\n\nexport default /*#__PURE__*/ observer( ComplexTable );","import { ComplexTable as Table } from  \"af-virtual-scroll\";\nimport faker from \"faker\";\n\nconst rows = Array.from({ length: 10000 }, (v, i) => ({\n    i,\n    fixedRange: i % 9,\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    country: faker.address.country()\n}));\n\n/* Math.random is not the best option, because same rowIndex should produce same height */\nconst getPureRandomLineHeight = rowIndex => 20 + ( rowIndex % 53 ) + ( rowIndex % 87 );\n\nconst ComplexTable = () => (\n    <Table\n        rowsQuantity={rows.length}\n        getRowData={i => rows[ i ]}\n        estimatedRowHeight={30}\n        columns={[\n            {\n                dataKey: \"i\",\n                label: \"i\",\n                totals: \"sum\",\n                render: cellData => (\n                    <div style={{\n                        color: \"#000\",\n                        textAlign: \"center\",\n                        lineHeight: `${getPureRandomLineHeight(cellData)}px`,\n                        background: `hsl(${cellData*11%360},60%,60%)`\n                    }}>\n                        {cellData}\n                    </div>\n                )\n            },\n            {\n                dataKey: \"fixedRange\",\n                label: \"FR\",\n                initialGroupingIndex: 1,\n                priorityGroupValues: [ 4, 7, 71, 5 ]\n            },\n            {\n                dataKey: \"firstName\",\n                label: \"first name\",\n                initialGroupingIndex: 2,\n                priorityGroupValues: [ \"Dennis\" ],\n                totals: \"count\"\n            },\n            { dataKey: \"lastName\", label: \"last name\" },\n            { dataKey: \"country\", label: \"country\" }\n        ]}\n    />\n);\n\nexport default ComplexTable;"],"sourceRoot":""}