/*

   this index.js file is used for including the faker library as a CommonJS module, instead of a bundle

   you can include the faker library into your existing node.js application by requiring the entire /faker directory

    var faker = require(./faker);
    var randomName = faker.name.findName();

   you can also simply include the "faker.js" file which is the auto-generated bundled version of the faker library

    var faker = require(./customAppPath/faker);
    var randomName = faker.name.findName();


  if you plan on modifying the faker library you should be performing your changes in the /lib/ directory

*/

/*

Copyright (c) 2012-2014 Jeffrey Mealo

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

------------------------------------------------------------------------------------------------------------------------

Based loosely on Luka Pusic's PHP Script: http://360percents.com/posts/php-random-user-agent-generator/

The license for that script is as follows:

"THE BEER-WARE LICENSE" (Revision 42):

<pusic93@gmail.com> wrote this file. As long as you retain this notice you can do whatever you want with this stuff.
If we meet some day, and you think this stuff is worth it, you can buy me a beer in return. Luka Pusic

*/

/*

The MIT License (MIT)

Copyright (c) 2014 Jonathan Ong me@jongleberry.com

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Definitions from mime-db v1.21.0
For updates check: https://github.com/jshttp/mime-db/blob/master/db.json

*/

/*
      * password-generator ( function )
      * Copyright(c) 2011-2013 Bermi Ferrer <bermi@bermilabs.com>
      * MIT Licensed
      */

/*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */

/*
   A C-program for MT19937, with initialization improved 2002/1/26.
   Coded by Takuji Nishimura and Makoto Matsumoto.

   Before using, initialize the state by using init_genrand(seed)
   or init_by_array(init_key, key_length).

   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:

     1. Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

     2. Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

     3. The names of its contributors may not be used to endorse or promote
        products derived from this software without specific prior written
        permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


   Any feedback is very welcome.
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html
   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)
*/

/*
  fake.js - generator method for combining faker methods based on string input

*/

/*
  self.categories = function(num) {
      var categories = [];

      do {
          var category = faker.random.arrayElement(faker.definitions.commerce.department);
          if(categories.indexOf(category) === -1) {
              categories.push(category);
          }
      } while(categories.length < num);

      return categories;
  };

  */

/*
  self.mergeCategories = function(categories) {
      var separator = faker.definitions.separator || " &";
      // TODO: find undefined here
      categories = categories || faker.definitions.commerce.categories;
      var commaSeparated = categories.slice(0, -1).join(', ');

      return [commaSeparated, categories[categories.length - 1]].join(separator + " ");
  };
  */

/*
String.prototype.capitalize = function () { //v1.0
    return this.replace(/\w+/g, function (a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
    });
};
*/

/* .DndContext.Provider */

/* .createDndContext */

/* 2002/01/09 modified by Makoto Matsumoto             */

/* DndContext */

/* In the previous versions, MSBs of the seed affect   */

/* Period parameters */

/* Reaction */

/* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */

/* Tempering */

/* These real versions are due to Isaku Wada, 2002/01/09 added */

/* a default initial seed is used */

/* binding */

/* constant vector a */

/* constants should be scoped inside the class */

/* default */

/* divided by 2^32 */

/* divided by 2^32-1 */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* for generated name */

/* generate N words at one time */

/* generates a random number on (0,1)-real-interval */

/* generates a random number on [0,0x7fffffff]-interval */

/* generates a random number on [0,0xffffffff]-interval */

/* generates a random number on [0,1) with 53-bit resolution*/

/* generates a random number on [0,1)-real-interval */

/* generates a random number on [0,1]-real-interval */

/* getDependencyTree */

/* globals self */

/* harmony default export */

/* harmony export */

/* harmony import */

/* harmony reexport (checked) */

/* if init_genrand() has not been called, */

/* init_key is the array for initializing keys */

/* initialize by an array with array-length */

/* initializes mt[N] with a seed */

/* invariant */

/* istanbul ignore next */

/* key_length is its length */

/* least significant r bits */

/* mag01[x] = x * MATRIX_A  for x=0,1 */

/* module decorator */

/* most significant w-r bits */

/* moved outside of genrand_int32() by jwatte 2010-11-17; generate less garbage */

/* mti==N+1 means mt[N] is not initialized */

/* only MSBs of the array mt[].                        */

/* reexport */

/* reexport safe */

/* see #1208 */

/* slight change for C++, 2004/2/26 */

/* the array for the state vector  */

/*#__PURE__*/

/**
         * On timer based implementation we don't really need this object,
         * but we keep the same api
         */

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * Latest 'uncommitted reactions' cleanup timer handle.
     */

/**
     * Only to be used by test functions; do not export outside of mobx-react-lite
     */

/**
     * Reactions created by components that have yet to be fully mounted.
     */

/**
     * Return a random time zone
     * @method faker.address.timeZone
     */

/**
     * Run by the cleanup timer to dispose any outstanding reactions
     */

/**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */

/**
     * avatar
     *
     * @method faker.image.lorempicsum.avatar
     */

/**
     * image
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @param {number} blur 1-10
     * @method faker.image.lorempicsum.image
     * @description search image from unsplash
     */

/**
     * imageBlurred
     *
     * @param {number} width
     * @param {number} height
     * @param {number} blur 1-10
     * @method faker.image.lorempicsum.imageBlurred
     * @description search blurred image from unsplash
     */

/**
     * imageGrayscaled
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @method faker.image.lorempicsum.imageGrayscaled
     * @description search grayscale image from unsplash
     */

/**
     * imageRandomSeeded
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @param {number} blur 1-10
     * @param {string} seed
     * @method faker.image.lorempicsum.imageRandomSeeded
     * @description search same random image from unsplash, based on a seed
     */

/**
     * imageUrl
     *
     * @param {number} width
     * @param {number} height
     * @param {boolean} grayscale
     * @param {number} blur 1-10
     * @param {string} seed
     * @method faker.image.lorempicsum.imageUrl
     */

/**
    * parse string paterns in a similar way to RegExp
    *
    * e.g. "#{3}test[1-5]" -> "###test4"
    *
    * @method faker.helpers.regexpStyleStringParse
    * @param {string} string
    */

/**
   *  direction
   *
   * @method faker.address.direction
   * @param {Boolean} useAbbr return direction abbreviation. defaults to false
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */

/**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce a new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */

/**
   * Credit card CVV
   * @method faker.finance.creditCardCVV
  */

/**
   * Credit card number
   * @method faker.finance.creditCardNumber
   * @param {string} provider | scheme
  */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Generate profiling statistics for the HTML5Backend.
   */

/**
   * Generates a random localized city name. The format string can contain any
   * method provided by faker wrapped in `{{}}`, e.g. `{{name.firstName}}` in
   * order to build the city name.
   *
   * If no format string is provided one of the following is randomly used:
   *
   * * `{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}`
   * * `{{address.cityPrefix}} {{name.firstName}}`
   * * `{{name.firstName}}{{address.citySuffix}}`
   * * `{{name.lastName}}{{address.citySuffix}}`
   *
   * @method faker.address.city
   * @param {String} format
   */

/**
   * Generates random zipcode from format. If format is not specified, the
   * locale's zip format is used.
   *
   * @method faker.address.zipCode
   * @param {String} format
   */

/**
   * Generates random zipcode from state abbreviation. If state abbreviation is
   * not specified, a random zip code is generated according to the locale's zip format.
   * Only works for locales with postcode_by_state definition. If a locale does not
   * have a postcode_by_state definition, a random zip code is generated according
   * to the locale's zip format.
   *
   * @method faker.address.zipCodeByState
   * @param {String} state
   */

/**
   * Generator method for combining faker methods based on string input
   *
   * __Example:__
   *
   * ```
   * console.log(faker.fake('{{name.lastName}}, {{name.firstName}} {{name.suffix}}'));
   * //outputs: "Marks, Dean Sr."
   * ```
   *
   * This will interpolate the format string with the value of methods
   * [name.lastName]{@link faker.name.lastName}, [name.firstName]{@link faker.name.firstName},
   * and [name.suffix]{@link faker.name.suffix}
   *
   * @method faker.fake
   * @param {string} str
   */

/**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */

/**
   * Invoke this method to notify mobx that your atom has been used somehow.
   * Returns true if there is currently a reactive context.
   */

/**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Return a random localized city prefix
   * @method faker.address.cityPrefix
   */

/**
   * Return a random localized city suffix
   *
   * @method faker.address.citySuffix
   */

/**
   * Returns a random localized street address
   *
   * @method faker.address.streetAddress
   * @param {Boolean} useFullAddress
   */

/**
   * Returns a random localized street name
   *
   * @method faker.address.streetName
   */

/**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * abbreviation
   *
   * @method faker.hacker.abbreviation
   */

/**
   * abstract
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.abstract
   */

/**
   * abstract
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.abstract
   */

/**
   * account
   *
   * @method faker.finance.account
   * @param {number} length
   */

/**
   * accountName
   *
   * @method faker.finance.accountName
   */

/**
   * adjective
   *
   * @method faker.hacker.adjective
   */

/**
   * alpha. returns lower/upper alpha characters based count and upcase options
   *
   * @method faker.random.alpha
   * @param {mixed} options // defaults to { count: 1, upcase: false }
   */

/**
   * alphaNumeric
   *
   * @method faker.random.alphaNumeric
   * @param {number} count defaults to 1
   */

/**
   * amount
   *
   * @method faker.finance.amount
   * @param {number} min
   * @param {number} max
   * @param {number} dec
   * @param {string} symbol
   *
   * @return {string}
   */

/**
   * animals
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.animals
   */

/**
   * animals
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.animals
   */

/**
   * avatar
   *
   * @method faker.image.avatar
   */

/**
   * avatar
   *
   * @method faker.image.lorempixel.avatar
   */

/**
   * avatar
   *
   * @method faker.image.unsplash.avatar
   */

/**
   * avatar
   *
   * @method faker.internet.avatar
   */

/**
   * backword-compatibility
   *
   * @method faker.helpers.randomize
   * @param {array} array
   */

/**
   * between
   *
   * @method faker.date.between
   * @param {date} from
   * @param {date} to
   */

/**
   * bic
   *
   * @method  faker.finance.bic
   */

/**
   * bitcoinAddress
   *
   * @method  faker.finance.bitcoinAddress
   */

/**
   * boolean
   *
   * @method faker.random.boolean
   */

/**
   * branch
   *
   * @method faker.git.branch
   */

/**
   * bs
   *
   * @method faker.company.bs
   */

/**
   * bsAdjective
   *
   * @method faker.company.bsAdjective
   */

/**
   * bsBuzz
   *
   * @method faker.company.bsBuzz
   */

/**
   * bsNoun
   *
   * @method faker.company.bsNoun
   */

/**
   * buildings
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.buildings
   */

/**
   * business
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.business
   */

/**
   * business
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.business
   */

/**
   * cardinal direction
   *
   * @method faker.address.cardinalDirection
   * @param {Boolean} useAbbr return direction abbreviation. defaults to false
   */

/**
   * catchPhrase
   *
   * @method faker.company.catchPhrase
   */

/**
   * catchPhraseAdjective
   *
   * @method faker.company.catchPhraseAdjective
   */

/**
   * catchPhraseDescriptor
   *
   * @method faker.company.catchPhraseDescriptor
   */

/**
   * catchPhraseNoun
   *
   * @method faker.company.catchPhraseNoun
   */

/**
   * cats
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.cats
   */

/**
   * cats
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.cats
   */

/**
   * city
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.city
   */

/**
   * city
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.city
   */

/**
   * collation
   *
   * @method faker.database.collation
   */

/**
   * color
   *
   * @method faker.commerce.color
   */

/**
   * color
   *
   * @method faker.internet.color
   * @param {number} baseRed255
   * @param {number} baseGreen255
   * @param {number} baseBlue255
   */

/**
   * color
   *
   * @method faker.vehicle.color
   */

/**
   * column
   *
   * @method faker.database.column
   */

/**
   * commitEntry
   *
   * @method faker.git.commitEntry
   * @param {object} options
   */

/**
   * commitMessage
   *
   * @method faker.git.commitMessage
   */

/**
   * commitSha
   *
   * @method faker.git.commitSha
   */

/**
   * commonFileName
   *
   * @method faker.system.commonFileName
   * @param {string} ext
   * @param {string} type
   */

/**
   * companyName
   *
   * @method faker.company.companyName
   * @param {string} format
   */

/**
   * companySuffix
   *
   * @method faker.company.companySuffix
   */

/**
   * contextualCard
   *
   * @method faker.helpers.contextualCard
   */

/**
   * country
   *
   * @method faker.address.country
   */

/**
   * countryCode
   *
   * @method faker.address.countryCode
   * @param {string} alphaCode default alpha-2
   */

/**
   * county
   *
   * @method faker.address.county
   */

/**
   * createCard
   *
   * @method faker.helpers.createCard
   */

/**
   * createTransaction
   *
   * @method faker.helpers.createTransaction
   */

/**
   * currencyCode
   *
   * @method faker.finance.currencyCode
   */

/**
   * currencyName
   *
   * @method faker.finance.currencyName
   */

/**
   * currencySymbol
   *
   * @method faker.finance.currencySymbol
   */

/**
   * dataUri
   *
   * @param {number} width
   * @param {number} height
   * @param {string} color
   * @method faker.image.dataUri
   */

/**
   * department
   *
   * @method faker.commerce.department
   */

/**
   * description
   *
   * @method  faker.finance.transactionDescription
   */

/**
   * domainName
   *
   * @method faker.internet.domainName
   */

/**
   * domainSuffix
   *
   * @method faker.internet.domainSuffix
   */

/**
   * domainWord
   *
   * @method faker.internet.domainWord
   */

/**
   * email
   *
   * @method faker.internet.email
   * @param {string} firstName
   * @param {string} lastName
   * @param {string} provider
   */

/**
   * engine
   *
   * @method faker.database.engine
   */

/**
   * ethereumAddress
   *
   * @method  faker.finance.ethereumAddress
   */

/**
   * exampleEmail
   *
   * @method faker.internet.exampleEmail
   * @param {string} firstName
   * @param {string} lastName
   */

/**
   * fashion
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.fashion
   */

/**
   * fashion
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.fashion
   */

/**
   * fileExt
   *
   * @method faker.system.fileExt
   * @param {string} mimeType
   */

/**
   * findName
   *
   * @method findName
   * @param {string} firstName
   * @param {string} lastName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * firstName
   *
   * @method firstName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.food
   */

/**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.food
   */

/**
   * food
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.food
   */

/**
   * fuel
   *
   * @method faker.vehicle.fuel
   */

/**
   * future
   *
   * @method faker.date.future
   * @param {number} years
   * @param {date} refDate
   */

/**
   * gender
   *
   * @method gender
   * @memberof faker.name
   */

/**
   * generates a file name with extension or optional type
   *
   * @method faker.system.fileName
   * @param {string} ext
   * @param {string} type
   */

/**
   * generates a space separated list of words
   *
   * @method faker.lorem.words
   * @param {number} num number of words, defaults to 3
   */

/**
   * generates a word of a specified length
   *
   * @method faker.lorem.word
   * @param {number} length length of the word that should be returned. Defaults to a random length
   */

/**
   * hexaDecimal
   *
   * @method faker.random.hexaDecimal
   * @param {number} count defaults to 1
   */

/**
   * iban
   *
   * @method  faker.finance.iban
   */

/**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.image
   */

/**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.image
   */

/**
   * image
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.image
   * @description search image from unsplash
   */

/**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {boolean} randomize
   * @method faker.image.imageUrl
   */

/**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {boolean} randomize
   * @method faker.image.lorempixel.imageUrl
   */

/**
   * imageUrl
   *
   * @param {number} width
   * @param {number} height
   * @param {string} category
   * @param {string} keyword
   * @method faker.image.unsplash.imageUrl
   */

/**
   * ingverb
   *
   * @method faker.hacker.ingverb
   */

/**
   * internal, use schedule() if you intend to kick off a reaction
   */

/**
   * ip
   *
   * @method faker.internet.ip
   */

/**
   * ipv6
   *
   * @method faker.internet.ipv6
   */

/**
   * jobArea
   *
   * @method jobArea
   * @memberof faker.name
   */

/**
   * jobDescriptor
   *
   * @method jobDescriptor
   * @memberof faker.name
   */

/**
   * jobTitle
   *
   * @method jobTitle
   * @memberof faker.name
   */

/**
   * jobType
   *
   * @method jobType
   * @memberof faker.name
   */

/**
   * lastName
   *
   * @method lastName
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * latitude
   *
   * @method faker.address.latitude
   * @param {Double} max default is 90
   * @param {Double} min default is -90
   * @param {number} precision default is 4
   */

/**
   * locale
   *
   * @method faker.random.image
   */

/**
   * locale
   *
   * @method faker.random.locale
   */

/**
   * longitude
   *
   * @method faker.address.longitude
   * @param {Double} max default is 180
   * @param {Double} min default is -180
   * @param {number} precision default is 4
   */

/**
   * mac
   *
   * @method faker.internet.mac
   * @param {string} sep
   */

/**
   * manufacturer
   *
   * @method faker.vehicle.manufacturer
   */

/**
   * mask
   *
   * @method faker.finance.mask
   * @param {number} length
   * @param {boolean} parens
   * @param {boolean} ellipsis
   */

/**
   * mimeType
   *
   * @method faker.system.mimeType
   */

/**
   * model
   *
   * @method faker.vehicle.model
   */

/**
   * month
   *
   * @method faker.date.month
   * @param {object} options
   */

/**
   * mustache
   *
   * @method faker.helpers.mustache
   * @param {string} str
   * @param {object} data
   */

/**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.nature
   */

/**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nature
   */

/**
   * nature
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.nature
   */

/**
   * nightlife
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.nightlife
   */

/**
   * nightlife
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.nightlife
   */

/**
   * noun
   *
   * @method faker.hacker.noun
   */

/**
   * objects
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.objects
   */

/**
   * ordinal direction
   *
   * @method faker.address.ordinalDirection
   * @param {Boolean} useAbbr return direction abbreviation. defaults to false
   */

/**
   * paragraph
   *
   * @method faker.lorem.paragraph
   * @param {number} sentenceCount defaults to 3
   */

/**
   * paragraphs
   *
   * @method faker.lorem.paragraphs
   * @param {number} paragraphCount defaults to 3
   * @param {string} separator defaults to `'\n \r'`
   */

/**
   * parses string for a symbol and replace it with a random number from 1-10
   *
   * @method faker.helpers.replaceSymbolWithNumber
   * @param {string} string
   * @param {string} symbol defaults to `"#"`
   */

/**
   * parses string for symbols (numbers or letters) and replaces them appropriately (# will be replaced with number,
   * ? with letter and * will be replaced with number or letter)
   *
   * @method faker.helpers.replaceSymbols
   * @param {string} string
   */

/**
   * password
   *
   * @method faker.internet.password
   * @param {number} len
   * @param {boolean} memorable
   * @param {string} pattern
   * @param {string} prefix
   */

/**
   * past
   *
   * @method faker.date.past
   * @param {number} years
   * @param {date} refDate
   */

/**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.people
   */

/**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.people
   */

/**
   * people
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.people
   */

/**
   * phoneFormats
   *
   * @method faker.phone.phoneFormats
   */

/**
   * phoneNumber
   *
   * @method faker.phone.phoneNumber
   * @param {string} format
   * @memberOf faker.phone
   */

/**
   * phoneNumberFormat
   *
   * @method faker.phone.phoneFormatsArrayIndex
   * @param phoneFormatsArrayIndex
   * @memberOf faker.phone
   */

/**
   * phrase
   *
   * @method faker.hacker.phrase
   */

/**
   * prefix
   *
   * @method prefix
   * @param {mixed} gender
   * @memberof faker.name
   */

/**
   * price
   *
   * @method faker.commerce.price
   * @param {number} min
   * @param {number} max
   * @param {number} dec
   * @param {string} symbol
   *
   * @return {string}
   */

/**
   * product
   *
   * @method faker.commerce.product
   */

/**
   * productAdjective
   *
   * @method faker.commerce.productAdjective
   */

/**
   * productDescription
   *
   * @method faker.commerce.productDescription
   */

/**
   * productMaterial
   *
   * @method faker.commerce.productMaterial
   */

/**
   * productName
   *
   * @method faker.commerce.productName
   */

/**
   * protocol
   *
   * @method faker.internet.protocol
   */

/**
   * randomWords
   *
   * @method faker.random.words
   * @param {number} count defaults to a random value between 1 and 3
   */

/**
   * recent
   *
   * @method faker.date.recent
   * @param {number} days
   * @param {date} refDate
   */

/**
   * recent
   *
   * @method faker.time.recent
   * @param {string} outputType - 'abbr' || 'wide' || 'unix' (default choice)
   */

/**
   * replace symbols in a credit card schems including Luhn checksum
   *
   * @method faker.helpers.replaceCreditCardSymbols
   * @param {string} string
   * @param {string} symbol
   */

/**
   * returns a commonly used file extension based on optional type
   *
   * @method faker.system.commonFileExt
   * @param {string} type
   */

/**
   * returns a commonly used file type
   *
   * @method faker.system.commonFileType
   */

/**
   * returns a single random floating-point number based on a max number or range
   *
   * @method faker.random.float
   * @param {mixed} options
   */

/**
   * returns a single random number based on a max number or range
   *
   * @method faker.random.number
   * @param {mixed} options {min, max, precision}
   */

/**
   * returns any file type available as mime-type
   *
   * @method faker.system.fileType
   */

/**
   * returns directory path
   *
   * @method faker.system.directoryPath
   */

/**
   * returns file path
   *
   * @method faker.system.filePath
   */

/**
   * returns lines of lorem separated by `'\n'`
   *
   * @method faker.lorem.lines
   * @param {number} lineCount defaults to a random number between 1 and 5
   */

/**
   * returns random text based on a random lorem method
   *
   * @method faker.lorem.text
   * @param {number} times
   */

/**
   * routingNumber
   *
   * @method faker.finance.routingNumber
   */

/**
   * secondaryAddress
   *
   * @method faker.address.secondaryAddress
   */

/**
   * semver
   *
   * @method faker.system.semver
   */

/**
   * sentence
   *
   * @method faker.lorem.sentence
   * @param {number} wordCount defaults to a random number between 3 and 10
   * @param {number} range
   */

/**
   * sentences
   *
   * @method faker.lorem.sentences
   * @param {number} sentenceCount defautls to a random number between 2 and 6
   * @param {string} separator defaults to `' '`
   */

/**
   * shortSha
   *
   * @method faker.git.shortSha
   */

/**
   * slug
   *
   * @method faker.lorem.slug
   * @param {number} wordCount number of words, defaults to 3
   */

/**
   * slugifies string
   *
   * @method faker.helpers.slugify
   * @param {string} string
   */

/**
   * soon
   *
   * @method faker.date.soon
   * @param {number} days
   * @param {date} refDate
   */

/**
   * sports
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.sports
   */

/**
   * sports
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.sports
   */

/**
   * state
   *
   * @method faker.address.state
   * @param {Boolean} useAbbr
   */

/**
   * stateAbbr
   *
   * @method faker.address.stateAbbr
   */

/**
   * streetPrefix
   *
   * @method faker.address.streetPrefix
   */

/**
   * streetSuffix
   *
   * @method faker.address.streetSuffix
   */

/**
   * suffix
   *
   * @method suffix
   * @memberof faker.name
   */

/**
   * suffixes
   *
   * @method faker.company.suffixes
   */

/**
   * takes an array and randomizes it in place then returns it
   * 
   * uses the modern version of the Fisher–Yates algorithm
   *
   * @method faker.helpers.shuffle
   * @param {array} o
   */

/**
   * takes an array and returns a random element of the array
   *
   * @method faker.random.arrayElement
   * @param {array} array
   */

/**
   * takes an array and returns a subset with random elements of the array
   *
   * @method faker.random.arrayElements
   * @param {array} array
   * @param {number} count number of elements to pick
   */

/**
   * takes an object and returns the randomly key or value
   *
   * @method faker.random.objectElement
   * @param {object} object
   * @param {mixed} field
   */

/**
   * technics
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.technics
   */

/**
   * technics
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.technics
   */

/**
   * technology
   *
   * @param {number} width
   * @param {number} height
   * @param {string} keyword
   * @method faker.image.unsplash.technology
   */

/**
   * title
   *
   * @method title
   * @memberof faker.name
   */

/**
   * transactionType
   *
   * @method faker.finance.transactionType
   */

/**
   * transport
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.lorempixel.transport
   */

/**
   * transport
   *
   * @param {number} width
   * @param {number} height
   * @param {boolean} randomize
   * @method faker.image.transport
   */

/**
   * type
   *
   * @method faker.database.type
   */

/**
   * type
   *
   * @method faker.vehicle.type
   */

/**
   * unique
   *
   * @method unique
   */

/**
   * url
   *
   * @method faker.internet.url
   */

/**
   * userAgent
   *
   * @method faker.internet.userAgent
   */

/**
   * userCard
   *
   * @method faker.helpers.userCard
   */

/**
   * userName
   *
   * @method faker.internet.userName
   * @param {string} firstName
   * @param {string} lastName
   */

/**
   * uuid
   *
   * @method faker.random.uuid
   */

/**
   * vehicle
   *
   * @method faker.vehicle.vehicle
   */

/**
   * verb
   *
   * @method faker.hacker.verb
   */

/**
   * vin
   *
   * @method faker.vehicle.vin
   */

/**
   * weekday
   *
   * @param {object} options
   * @method faker.date.weekday
   */

/**
   * word
   *
   * @method faker.random.word
   * @param {string} type
   */

/**
 *
 * @namespace faker
 */

/**
 *
 * @namespace faker.address
 */

/**
 *
 * @namespace faker.internet
 */

/**
 *
 * @namespace faker.name
 */

/**
 *
 * @namespace faker.random
 */

/**
 *
 * @namespace faker.system
 */

/**
 *
 * @namespace faker.unique
 */

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 * (c) Michel Weststrate 2015 - 2020
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * A React component that provides the React-DnD context
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */

/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Create the React Context
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */

/**
 * Creates the context object we're providing
 * @param backend
 * @param context
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */

/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */

/**
 * FinalizationRegistry-based uncommitted reaction cleanup
 */

/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */

/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */

/**
 * Makes sure that the provided function is invoked at most once.
 */

/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
 */

/**
 * The frequency with which we'll check for leaked reactions.
 */

/**
 * The minimum time before we'll clean up a Reaction created in a render
 * for a component that hasn't managed to run its effects. This needs to
 * be big enough to ensure that a component won't turn up and have its
 * effects run without being re-rendered.
 */

/**
 * These values will persist if global state is reset
 */

/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */

/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * We use class to make it easier to detect in heap snapshots by name
 */

/**
 * Wrap function from prototype
 * Without this, everything works as well, but this works
 * faster as everything works on unproxied values
 */

/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * litecoinAddress
 *
 * @method  faker.finance.litecoinAddress
 */

/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */

/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/**
 * timers, gc-style, uncommitted reaction cleanup
 */

/**
 * useDragSource hook
 * @param sourceSpec The drag source specification *
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification
 */

/** @class */

/** Merge another object into this object, returns this. */

/** string repeat helper, alternative to String.prototype.repeat.... See PR #382
   *
   * @method faker.helpers.repeatString
   * @param {string} string
   * @param {number} num
   */

/***/

//

//             " < " +

//             " because " +

//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance

//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance

//             min +

//             msg +

//             observable.lowestObserverState

//         "INTERNAL ERROR there is no junk in map"

//         "lowestObserverState is wrong for " +

//         channel.port2.postMessage(0);

//         const id = list[i].__mapid

//         if (i) {

//         list.length === 0 || Object.keys(map).length === list.length - 1,

//         setImmediate(callback);

//         }

//         } else {

//     )

//     // it's expensive so better not run it in produciton. but temporarily helpful for testing

//     channel.port1.onmessage = callback;

//     const l = list.length

//     const list = observable.observers

//     const map = observable.observersIndexes

//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)

//     for (let i = 0; i < l; i++) {

//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`

//     invariant(

//     return function requestCall() {

//     throw new Error(

//     var channel = new MessageChannel();

//     }

//     };

//    since it wouldn't be a callable function anymore

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

//   0: it was set to 0 in last loop. don't need to do anything.

//   0: it's not in new observables, unobserve it

//   1: it keeps being observed, don't want to notify it. change to 0

//   1: it wasn't observed, let's observe it. set back to 0

//  Export a simplified function to generate random numbers

//  Export the twister class

//  Exports: Public API

// !globalState.trackingDerivatpion &&

// "drop and blow away the whole document" action.

// #2432 - reduce behavior depends on arguments.length

// (It triggers warnings in StrictMode, for a start.)

// (then we can remove the weird short circuiting as well..)

// - Android 4-4.3

// - Chrome 26-34

// - Firefox 14-29

// - Internet Explorer 11

// - Safari 6-7

// - allow interceptors to run and potentially prevent individual operations

// - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)

// - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)

// - iPad Safari 6-7.1

// - iPhone Safari 7-7.1

// - note that result map may differ from replacement map due to the interceptors

// - respect ordering of replacement map

// 1. it cannot go before memo, only after it

// 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it

// 5018 xxxx xxxx xxxx xxL

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// @action

// @computed

// @computed({ options })

// @decorator member

// @decorator(arg) member

// @flow

// @observable someProp;

// @ts-ignore

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// A shallow dependency has changed since last computation and the derivation

// Add or update value

// Add the first object to the stack of traversed objects.

// Added max, min range functionality, Marak Squires Sept 11 2014

// Advance the index before calling the task. This ensures that we will

// Align at the center

// An `egal` comparison is performed for other numeric values.

// An exception thrown by a task will permanently interrupt the processing of

// Annation: action("name") & @action("name")

// Any reducers that existed in both the new and old rootReducer

// Array-as-queue is good enough here, since we are just dealing with exceptions.

// Assume equality for cyclic structures. The algorithm for detecting cyclic

// Avoid crashing if we missed a drop event or our previous drag died

// BUT if we're a component that hasn't yet got to the useEffect()

// But: https://github.com/mobxjs/mobx/issues/1556

// CONCATENATED MODULE: ./node_modules/@react-dnd/asap/dist/esm/browser/asap.js

// CONCATENATED MODULE: ./node_modules/@react-dnd/asap/dist/esm/browser/raw.js

// CONCATENATED MODULE: ./node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/DragDropManagerImpl.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/DragDropMonitorImpl.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/HandlerRegistryImpl.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/index.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/dragDrop/types.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/actions/registry.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/contracts.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/factories.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/dragOffset.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/dragOperation.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/index.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/refCount.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/reducers/stateId.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/dirtiness.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: ./node_modules/dnd-core/dist/esm/utils/matchesType.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/observer.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/useObserver.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/FinalizationRegistryWrapper.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/printDebugValue.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTracking.js

// CONCATENATED MODULE: ./node_modules/mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/EnterLeaveCounter.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/HTML5BackendImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/MonotonicInterpolant.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/NativeDragSource.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/getDataFromDataTransfer.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/index.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/OptionsReader.js

// CONCATENATED MODULE: ./node_modules/react-dnd-html5-backend/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/DndContext.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/DragSourceMonitorImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/DropTargetMonitorImpl.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/SourceConnector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/TargetConnector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/registration.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/index.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/drag.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/drop.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useCollector.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrag.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/hooks/useDrop.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/utils/cloneWithRef.js

// CONCATENATED MODULE: ./node_modules/react-dnd/dist/esm/utils/isRef.js

// CONCATENATED MODULE: ./node_modules/symbol-observable/es/index.js

// CONCATENATED MODULE: ./node_modules/symbol-observable/es/ponyfill.js

// Called by Atom when its value changes

// Called by ComputedValue when it recalculate and its value changed

// Called on first mount only

// Check for possible key order change

// Check the node either in the main document or in the current context

// Check the target ids at the innermost position. If they are valid, add them

// Choose a random provider

// Coerce dates and booleans to numeric primitive values. Dates are compared by their

// Compare `[[Class]]` names.

// Compare array lengths to determine if a deep comparison is necessary.

// Concurrently iterating/deleting keys

// Convert to map so we can do quick key lookups

// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289

// Create a Getter for all definitions.foo.bar properties

// Credit cards are in a object structure

// Custom components can no longer be wrapped directly in React DnD 2.0

// Cut out early if the target id has not been set. This should prevent errors

// Deal with range `[min-max]` (only works with numbers for now)

// Deal with range repeat `{min,max}`

// Deal with repeat `{num}`

// Deep compare each member

// Deep compare objects.

// Deep compare the contents, ignoring non-numeric properties.

// Delete keys that don't exist in replacement map

// Delete prevented by interceptor

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Doesn't seem we need this condition:

// Don't emit hover in `dragenter` on Firefox due to an edge case.

// Don't publish the source just yet (see why below)

// Don't show a nice cursor but still prevent default

// Don't want the source array exposed to modification, so return a copy

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@react-dnd/invariant/dist/invariant.esm.js

// EXTERNAL MODULE: ./node_modules/mobx/dist/mobx.esm.js

// EXTERNAL MODULE: ./node_modules/react-dnd/dist/esm/common/DndContext.js + 31 modules

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/symbol-observable/es/index.js + 1 modules

// Ensure that both objects contain the same number of properties before comparing deep equality.

// Equivalent to push, but avoids a function call.

// Even if we were, there is another bug in Internet Explorer 10.

// Exhaust primitive checks

// FIXME: this is strange passing in an array index.

// Finally block can return (or yield) stuff..

// Finally call hover on all matching targets.

// Firefox can dispatch this event in an infinite loop

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox won't drag without setting data

// First render for this component (or first time since a previous

// For other targets, ask IE

// For reasons explained above, we are also unable to use `setImmediate`

// From Immer utils

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get the draggable source

// Get the source client offset

// Go through all new observables and check diffValue: (now it should be unique)

// Go through all old observables and check diffValue: (it is unique after last bindDependencies)

// Got a change before first mount, force an update

// Great. We've already got our reaction from our render;

// Hence we work with two variables and check whether

// Hide this extra level by increasing the depth.

// However, `flush` does not make any arrangements to be called again if an

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, since this timer gets frequently dropped in Firefox

// IE doesn't support MIME types in setData

// IE requires this to fire dragover events

// Ideally we use for..of here, but the downcompiled version is really slow...

// Identical objects are equal. `0 === -0`, but they aren't identical.

// If a task throws an exception, `flush` ensures that its state will remain

// If anyone actually needs to optimize this specific code path, please open a support issue on github

// If by this time no drag source reacted, tell browser not to drag.

// If child drag source refuses drag but parent agrees,

// If parameters are populated here, they are always going to be of string type

// If passed a ReactElement, clone it and attach this function as a ref.

// If size differs, keys are definitely modified

// If the target changes position as the result of `dragenter`, Firefox

// If there is no coordinate, the best we can do is return a random GPS coordinate.

// If we call `asap` within tasks scheduled by `asap`, the queue will

// Implementation requirements:

// In a web browser, exceptions are not fatal. However, to avoid

// In some cases the user may want to override this behavior, e.g.

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Initializing stack of traversed objects.

// Inputs and textareas should be selectable

// Instead, we periodically shift 1024 tasks off the queue.

// Interceptor can modify the array, copy it to avoid concurrent modification, see #1950

// Internal recursive comparison function for `isEqual`.

// Interpolate

// It also neatly avoids a situation where render() returns null

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// It is used to specify a word in context, which may differ from a stand-alone word

// It's done here since we only need them for objects and arrays comparison.

// It's time to tidy up this leaked reaction.

// Its name will be periodically randomized to break any code that

// Its name will be periodically randomized to break any code that depends on

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Keep longitude in range [-180, 180]

// Linear search. Performance is inversely proportional to the number of

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Loop through all the candidate leaked reactions; those older

// MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient

// Make sure callbacks recieve correct array arg #2326

// Make the range inclusive of the max value

// Manually shift all values starting at the index back to the

// Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.

// Merge entries

// Modules 10 straight summation.

// Multiple actions are dispatched here, which is why this doesn't return an action

// Must use `global` or `self` instead of `window` to work in both frames and web

// MutationObservers are desirable because they have high priority and work

// MutationObservers, so we don't need to fall back in that case.

// N.B: unminified as it is used by MST

// NAMESPACE OBJECT: ./node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// Never forget.

// No Array.fill everywhere...

// Not supported in IE, so there are not going to be symbol props anyway...

// Note: we experience a small performance hit here due to JSON.parse try / catch

// Note: without polyfill for ownKeys, symbols won't be picked up

// Object(NaN) is equivalent to NaN.

// Objects with different constructors are not equivalent, but `Object`s or `Array`s

// Observable has changed, meaning we want to re-render

// Once a flush has been requested, no further calls to `requestFlush` are

// Only IE requires us to explicitly say

// Only proceed if we have not handled it already.

// Optimization: cache meta data, especially for members from prototypes?

// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,

// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274

// Possible optimization: Don't have a separate map for non existing keys,

// Possibly include param to function that allows user to choose between distributions.

// Prevent default "drop and blow away the whole document" action.

// Prevent leaking memory for long chains of recursive calls to `asap`.

// Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is

// Property "abbr_context" is optional, if not set then "abbr" will be used instead

// Property "wide_context" is optional, if not set then "wide" will be used instead

// Radius of the Earth (http://nssdc.gsfc.nasa.gov/planetary/factsheet/earthfact.html)

// RawTasks are recycled to reduce GC churn.

// Re-create the reaction

// Rearrange xs and ys so that xs is sorted

// Receiving a mouse event in the middle of a dragging operation

// Recursively compare objects and arrays.

// RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

// Remove the first object from the stack of traversed objects.

// Remove those targetIds that don't match the targetType.  This

// Report and delegate to dehanced array

// Returns all own keys, including non-enumerable and symbolic

// Romanian

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// See perf test 'computed memoization'

// See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).

// See:

// See: https://github.com/andykog/mobx-devtools/

// Show user-specified drop effect.

// Some new observed derivations may become stale during this derivation computation

// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1799

// Source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/en.xml#L1847

// Source: https://unicode.org/cldr/trac/browser/trunk/common/main/pt.xml?rev=14409#L1811

// Source: https://unicode.org/cldr/trac/browser/trunk/common/main/pt_PT.xml?rev=14409#L491

// Store drag source node so we can check whether

// Strings, numbers, regular expressions, dates, and booleans are compared by value.

// TODO: change all these methods that accept a boolean to instead accept an options hash.

// TODO: have ability to return specific type of word? As in: noun, adjective, verb, etc

// TODO: if we ever make a react-native version of this,

// TODO: implement either a gaussian/uniform distribution of points in cicular region.

// TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place

// TODO: wire options into createSourceConnector

// Test for A's keys different from B.

// The addition could have been prevent by interceptor

// The browsers will use the image intrinsic size under different conditions.

// The drag preview may either be attached via ref or connect function

// The drop target may either be attached via ref or connect function

// The flush function processes all tasks that have been scheduled with

// The message channel technique was discovered by Malte Ubl and was the

// The reaction we set up in our render has been disposed.

// The rightmost point in the dataset should give an exact result

// The update could have been prevented by interceptor

// The user chose an optional scheme

// The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307

// There chould be multiple formats

// They are implemented in all modern browsers.

// This action has a similiar effect to ActionTypes.INIT.

// This allows us to control the execution of the cleanup timer

// This approach will likely result in a higher density of points near the center.

// This can be due to bad timings of renderings, e.g. our

// This fixes #1796, because deleting a prop that has an

// This helps us achieve a neat API where user doesn't even know that refs

// This hook exists purely for testing purposes.

// This is for `asap.js` only.

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is probably a native item type we don't understand.

// This is the reason such behavior is strictly opt-in.

// This is useful to prevent an error thrown in a task from stalling the event

// This time we are not capturing the char befor `[]`

// Trampolining, if runReactions are already running, new reactions will be picked up

// Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

// Typescript workaround to make sure ObservableArray extends Array

// UNUSED EXPORTS: NativeTypes, getEmptyImage

// UNUSED EXPORTS: useDragDropManager, useDragLayer

// Unwrap any wrapped objects.

// Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,

// Use a user provided seed if it exists

// Use correctly ordered map

// Use custom drag image if user specifies it.

// Use the fastest means possible to execute a task in its own turn, with

// Used by JSON.stringify

// Used by computed when its dependency changed, but we don't wan't to immediately recompute.

// Usually we want to publish it in the next tick so that browser

// Was a new key added?

// Was the key removed?

// We dispatch a timeout with a specified delay of 0 for engines that

// We have reached useEffect(), so we're mounted, and can trigger an update

// We haven't yet reached useEffect(), so we'll need to trigger a re-render

// We need to wait before we start listening for mousemove events.

// We queue errors to ensure they are thrown in right order (FIFO).

// We will want to know whether a new key is added

// We wrap tasks with recyclable task objects.  A task object implements

// We'll have to wait for @3x to see if this is entirely correct

// We've definitely already been mounted at this point

// We've just finished a round of cleanups but there are still

// Weex proto freeze protection was here,

// When FinalizationRegistry in use, this this is no-op

// When a store is created, an "INIT" action is dispatched so that every

// When passed a node, call the hook straight away.

// When using a custom drag layer, the only way to prevent

// Whichever timer succeeds will cancel both timers and

// While running reactions, new reactions might be triggered.

// Work around @2x coordinate discrepancies in browsers

// Work around Safari 8 positioning bug

// Workaround problem in Float point arithmetics for e.g. 6681493 / 0.01

// _keysAtom.reportChanged() was already called

// `NaN`s are equivalent, but non-reflexive.

// `call`, just like a function.

// `null` or `undefined` only equal to itself (strict comparison).

// `process.on("uncaughtException")` or by a domain.

// `rawAsap` unless and until one of those tasks throws an exception.

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// action("name", fn() {})

// action(fn() {})

// add a new item

// add entry at the beginning of the result map

// all we need to do is to record that it's now mounted,

// an almost straight conversion from the original program, mt19937ar.c,

// an async iterator

// an event 20 times per second until it succeeds.

// and `derivation` is an observer of `obj`

// and also we want to preserve existing values

// and height. In this case, though, returning null from render()

// and modified a little at july 20, 2006, but there are not any substantial differences.

// and skip either the internal values map, or the base object with its property descriptors!

// and the components are attached to dnd-core

// anyway, so removed it in V6

// apply modifier

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// are being used under the hood.

// array will be trimmed by bindDependencies

// assign options

// assign the function from the module.function namespace

// at this point derivation is not holding any data about dependency tree

// based on awesome response : http://stackoverflow.com/questions/43044/algorithm-to-randomly-generate-an-aesthetically-pleasing-color-palette

// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js

// before being run or (outside batch and not being observed)

// before using this version, create at least one instance of MersenneTwister19937 class, and initialize the each state, given below in c comments, of all the instances.

// begin flushing on the next task the task throws an error.

// beginning of the queue.

// between events.

// but it is unclear why the hack is need as MobX never changed the prototype

// but store them in the values map instead, using a special symbol to denote "not existing"

// by default preserve previous allow

// call `rawAsap.requestFlush` if an exception is thrown.

// can reliably accommodate that request. This will usually be snapped

// changed by interceptor. Same applies for other Set and Map api's.

// cheap lodash replacements

// check performance stats!

// closure.

// common error handler for messages

// component was paused for a _very_ long time, and our

// computed values are automatically teared down when the last observer leaves

// computed(expr, options?)

// conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

// consistent and will resume where it left off when called again.

// console.log('attempting to parse', str);

// console.log('conflict', result);

// console.log(now - startTime)

// currently only ComputedValue will propagate POSSIBLY_STALE

// currently uniqueness is global to entire faker instance

// debounced autorun

// default `noop` listener will not initialize the hook Set

// default symbol is '#'

// default values required for calling method without arguments

// delete the prop

// deleting last observer

// depends on its existence.

// disposed during last run. Clean up everything that was bound after the dispose call.

// disposer function

// don't allow state changes during computation

// don't have to recompute on every dependency change, but only when it's needed

// dragenter handler.

// during tracking it's an array with new observed observers

// eat anything that promise would do, it's cancelled!

// either ensure that no exceptions are thrown from your task, or to manually

// empty

// equivalent to `new String("5")`.

// eslint-disable-next-line

// eslint-disable-next-line no-console

// eslint-disable-next-line no-prototype-builtins

// even then.

// events in browsers.

// every available SauceLabs Selenium web driver worker at time of writing.

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// execute the callback.

// execute the provided method to find a potential satifised value

// extend observable will copy even unannotated properties

// extract method name from between the {{ }} that we found

// find first matching {{ and }}

// fixes shallow isOver which would only be non-shallow because of

// flow(fn)

// for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

// for example: {{name.firstName}}

// from different frames are.

// function invariantLOS(observable: IObservable, msg: string) {

// function invariantObservers(observable: IObservable) {

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// generates fake data for many computer systems properties

// get specific ext by mime-type

// global results store

// got dropped, and we don't want to make state changes then.

// grow, but to avoid an O(n) walk for every task we execute, we don't

// hasMap, not hashMap >-).

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// having this state is second big optimization:

// http://www.nonblocking.io/2011/06/windownexttick.html

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// https://github.com/react-dnd/react-dnd/issues/1310

// https://stackoverflow.com/a/37865170

// ideally, value = change.value would be done here, so that values can be

// if (adm.values.get(name as string)) return true

// if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))

// if (typeof range == 'undefined') { range = 7; }

// if ComputedValue `obj` actually changed it will be computed and propagated to its observers.

// if already wrapped in action, don't do that another time, but assume it is already set up properly

// if disposed while running, clean up later. Maybe not optimal, but rare case

// if dragend handler does something like showing an alert.

// if incoming str parameter is not provided, return error message

// if no {{ and }} is found, we are done

// if nothing has changed then don't resubscribe

// if the client passed in a different separator than `:`, 

// if the key deletion is prevented by interceptor

// if the originAnnotation was true, preferred the adm's default enhancer over the inferred one

// if the result has not been previously found, add it to the found array and return the value as it's unique

// if this observable had reactive observers, trigger the hooks

// if zip format is not specified, use the zip format defined for the locale

// ignore pure setters

// immediately in some browsers.

// in particular locales first and last names split by gender,

// in the same tick for the source element, and browser freaks out.

// in this program, procedure descriptions and comments of original source code were not removed.

// intercept

// invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");

// invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");

// invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");

// invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");

// invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");

// invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");

// invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");

// invariantLOS(observable, "changed start");

// invariantLOS(observable, "confirmed start");

// invariantLOS(observable, "maybe start");

// invariantObservers(observable);

// invariantShouldCompute(derivation)

// is able to screenshot the current (not yet dragging) state.

// is to add a scroll event listener that calls for a flush.

// it is an observable already, done

// it is removed from DOM and trigger endDrag manually.

// it's possible in the future that some users may want to scope found per function call instead of faker instance

// iterator should handle this correctly

// its existence.

// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54

// lines commented with /* and */ are original comments.

// lines commented with // are additional comments in this JavaScript version.

// lines commented with //c// were originally descriptions of c procedure. and a few following lines are appropriate JavaScript descriptions.

// lower priority turn.

// make sure we start listening to future keys

// map

// maybe it can be cancelled :)

// means it has ended and the drag source node disappeared from DOM,

// memoized from props

// millisecond representations. Note that invalid dates with millisecond representations

// mobx versions

// mutation observers, so that implementation is used instead.

// n.b. base case is not used for actual typings or exported in the typing files

// necessary until the next `flush` completes.

// never turn into an observable

// newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)

// no shallow dependency changed since last computation

// nodes we are looking at. Our value depends on these nodes

// non-matching targets.

// normal autorun

// not all fields are defined yet, so we are in the makeObservable call of some super class,

// not hitting the condition

// note that we only do this here for optimization

// notify key and keyset listeners

// notify spy & observers

// numeric string

// observableValue might have changed it

// of `NaN` are not equivalent.

// onBecomeObservedListeners

// optimization: this could be cached per prototype!

// original foundation for this library.

// out of bounds

// page's first load. Thankfully, this version of Safari supports

// pre allocate array allocation + room for variation in deps

// prettier-ignore

// priority over other events including IO, animation, reflow, and redraw

// public for test

// queue if the exception handled by Node.js’s

// randomly pick from the many faker methods that can generate words

// rawAsap provides everything we need except exception management.

// re-throw any exceptions caught during rendering

// reaction from an abandoned render was disposed).

// reaction got cleaned up

// reactions could create reactions...

// read to subscribe

// reduce

// reduce mime-types to those with file-extensions

// reducer returns their initial state. This effectively populates

// ref objects should be passed straight through without wrapping

// reject our original promise

// reliably everywhere they are implemented.

// replace ### with random numbers

// replace [4-9] with a random number in range etc...

// return Reflect.ownKeys(this.values) as any

// return the node so it can be chained (e.g. when within callback refs

// return the response recursively until we are done finding all tags

// reverse by default mutates in place before returning the result

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// second conditions is to recognize actions

// see above comment of firstName method

// shift tasks off the queue after they have been executed.

// short circuit, here, we will do this again in a later makeObservable call

// shortcut, reuse inferred annotations for this type from the previous time

// since JSON.parse threw an error, assume parameters was actually a string

// since we are requiring the top level of faker, load all locales by default

// since we might actually be dealing with an object or array,

// slowing down the queue of pending tasks, we rethrow the error in a

// so that we don't need to depend on findDOMNode() from react-dom.

// so the browser didn't dispatch the dragend event.

// so they have had no chance to propagate staleness (#916)

// so use value from _data map (instead of replacement map)

// some deep dependency changed, but don't know if shallow dependency changed

// some leak candidates outstanding.

// some locale datasets ( like ru ) have first_name split by gender. since the name.first_name field does not exist in these datasets,

// some locale datasets ( like ru ) have last_name split by gender. i have no idea how last names can have genders, but also i do not speak russian

// some time from now to N days ago, in milliseconds

// some time from now to N days later, in milliseconds

// some time from now to N years ago, in milliseconds

// some time from now to N years later, in milliseconds

// something that can be converted and mutated?

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// sort by default mutates in place before returning the result

// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1734

// source: http://unicode.org/cldr/trac/browser/tags/release-27/common/main/ru.xml#L1825

// split the method into module and function

// stage, we might be a component that _started_ to render, but

// state propagation can occur outside of action/reactive context #2195

// strange issue with the node_min_test failing for captialize, please fix and add faker.lorem.back

// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

// subsequent tasks. The higher level `asap` function ensures that if an

// support single exclude argument as string

// switch min and max

// than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.

// the `unique` module

// the autorun wouldn't subscribe to future key changes (see also next comment)

// the batch is actually about to finish, all unobserving should happen here.

// the default drag preview from drawing in IE is to screenshot

// the dragging state in which the node itself has zero opacity

// the initial state tree.

// the new state tree with any relevant data from the old one.

// there chould be multiple formats

// there could be a throwing finally block

// there. The easy solution is to only fire `hover` in `dragover` on FF.

// this is the prop that gets proxied, so can't replace it!

// this is what makes mobx fast

// this means that faker should currently *never* return duplicate values across all API methods when using `Faker.unique`

// this process happens recursively, this computed might be the last observabe of another, etc..

// this program is a JavaScript version of Mersenne Twister, with concealment and encapsulation in class,

// this value could be converted to a new observable data structure, return it

// thus we keep consistency by passing 0 as male and 1 as female

// time the script started

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to allow future observable changes to trigger re-renders

// to check for cycles

// to enable drag and drop

// to force it to run at awkward times in unit tests.

// to the result

// to work around IE not supporting custom drag previews.

// translated by y. okada on July 17, 2006.

// true for autoAction

// undefined on initial render

// undefined value won't retrigger a observer (no visible effect),

// under any circumstances.

// unique nested structures.

// update the collected properties after the first render

// use parent's node as drag image. Neither works in IE though.

// used by MST ot get undehanced value

// valid for arrays as well

// value might have been changed

// var startTime = 0;

// we always attempt to the parse the incoming parameters into JSON

// we are not interested in the value *or* exception at this moment, but if there is one, notify all

// we converge to no remaining reactions after a while.

// we don't care about invariant's own frame

// we have to use forwardRef here because:

// we must randomly pick a name from either gender array so faker.name.firstName will return the correct locale data ( and not fallback )

// we want drag drop operation to start

// we will use it if it is in the list of acceptable separators (dash or no separator)

// we'll need to consider how to pull off dev-tooling

// when (and if) useEffect() arrives.

// where is the property declared?

// where the user has an older version of dnd-core like in

// which goes against all good practices. Let's not change the array in place!

// which makes it both a 'derivation' and a 'mutation'.

// will abruptly end the dragging, which is not obvious.

// will need to recompute when it's needed next.

// will receive the previous state. This effectively populates

// will require to check first if UP_TO_DATE or POSSIBLY_STALE

// will still happily dispatch `dragover` despite target being no longer

// won't recalculate derivation

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// }

//# sourceMappingURL=FinalizationRegistryWrapper.js.map

//# sourceMappingURL=createReactionCleanupTrackingUsingFinalizationRegister.js.map

//# sourceMappingURL=createTimerBasedReactionCleanupTracking.js.map

//# sourceMappingURL=invariant.esm.js.map

//# sourceMappingURL=mobx.esm.js.map

//# sourceMappingURL=observer.js.map

//# sourceMappingURL=printDebugValue.js.map

//# sourceMappingURL=reactionCleanupTracking.js.map

//# sourceMappingURL=shallowequal.esm.js.map

//# sourceMappingURL=staticRendering.js.map

//# sourceMappingURL=useObserver.js.map

//@ts-ignore

//Fall back to non-gendered names if they exist and gender wasn't specified

//NOTE: this returns a string representation of the value, if you want a number use parseFloat and no symbol

//TODO: add a ranged date method

//TODO: implement for letters e.g. [0-9a-zA-Z] etc.

//c//	+ init_key[j] + j; /* non linear */

//c//#define LOWER_MASK 0x7fffffffUL /* least significant r bits */

//c//#define M 397

//c//#define MATRIX_A 0x9908b0dfUL   /* constant vector a */

//c//#define N 624

//c//#define UPPER_MASK 0x80000000UL /* most significant w-r bits */

//c//(1812433253 * (mt[mti-1] ^ (mt[mti-1] >> 30)) + mti);

//c//- i; /* non linear */

//c//double genrand_real1(void)

//c//double genrand_real2(void)

//c//double genrand_real3(void)

//c//double genrand_res53(void)

//c//init_genrand(19650218);

//c//init_genrand(5489); /* a default initial seed is used */

//c//int i, j, k;

//c//int kk;

//c//long genrand_int31(void)

//c//mt[0]= s & 0xffffffff;

//c//mt[N-1] = mt[M-1] ^ (y >> 1) ^ mag01[y & 0x1];

//c//mt[i] &= 0xffffffff; /* for WORDSIZE > 32 machines */

//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1566083941))

//c//mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 30)) * 1664525))

//c//mt[kk] = mt[kk+(M-N)] ^ (y >> 1) ^ mag01[y & 0x1];

//c//mt[kk] = mt[kk+M] ^ (y >> 1) ^ mag01[y & 0x1];

//c//mt[mti] &= 0xffffffff;

//c//return ((genrand_int32()) + 0.5)*(1.0/4294967296.0);

//c//return (genrand_int32()>>1);

//c//return genrand_int32()*(1.0/4294967295.0);

//c//return genrand_int32()*(1.0/4294967296.0);

//c//static int mti=N+1; /* mti==N+1 means mt[N] is not initialized */

//c//static unsigned long mag01[2]={0x0UL, MATRIX_A};

//c//static unsigned long mt[N]; /* the array for the state vector  */

//c//unsigned long genrand_int32(void)

//c//unsigned long y;

//c//void init_by_array(unsigned long init_key[], int key_length)

//c//void init_genrand(unsigned long s)

//c//y = (mt[N-1]&UPPER_MASK)|(mt[0]&LOWER_MASK);

//c//y = (mt[kk]&UPPER_MASK)|(mt[kk+1]&LOWER_MASK);

//c//y ^= (y << 15) & 0xefc60000;

//c//y ^= (y << 7) & 0x9d2c5680;

//c//y ^= (y >> 11);

//c//y ^= (y >> 18);

//calling rnd() with no arguments is identical to rnd(0, 100)

//console.log(currentIterations)

//create a template for length

//dots = 2 returns .x.y where x & y are between 0 and 9

//generate a random revision

//generate random numbers

//http://msdn.microsoft.com/en-us/library/ie/ms537503(v=vs.85).aspx

//http://www.opera.com/docs/history/

//https://developer.mozilla.org/en-US/docs/Gecko_user_agent_string_reference

//min and max take in minimum and maximum amounts, dec is the decimal place you want rounded to, symbol is $, €, £, etc

//prefix with ellipsis

//return  faker.lorem.words(wordCount + Helpers.randomNumber(range)).join(' ').capitalize();

//returns a random key from the passed object; keys are weighted by the decimal probability in their value

//set defaults
