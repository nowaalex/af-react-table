{"version":3,"sources":["webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/multiGroupBy/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/getSorter/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/sortGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/flattenGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/index.js","webpack://af-virtual-scroll/./src/components/ComplexTable/style.module.scss?b8c6","webpack://af-virtual-scroll/./src/components/ComplexTable/index.js","webpack://af-virtual-scroll/./src/examples/complexTable(unstable)/basic/index.js"],"names":["indexesArray","groupDataKeysList","getRowData","priorityGroupValuesArray","lastGroupIndex","length","lastGroupDataKey","groupsMap","Map","rowIndex","row","tmpInnerObject","cellValue","innerObject","i","get","priorityValue","has","set","push","sortDataKey","sortDirection","a","b","row1","row2","v1","v2","sortGroups","depth","currentDepth","groupValues","values","group","sortCallback","getSorter","sort","flattenGroups","collapsedGroups","prefix","rowIndexes","idx","groupValue","subGroup","concatenated","concat","Array","isArray","apply","this","groupKeys","map","dataKey","columns","find","c","priorityGroupValues","setFiltering","value","filtersMap","toLowerCase","delete","toggleCompact","compact","setSorting","setGrouping","dataKeysArray","addGrouping","includes","clear","toggleCollapsedGroup","add","removeGrouping","indexOf","splice","from","rowsQuantity","v","multiGroupBy","filteredIndexes","grouped","groupedSorted","orderedIndexes","size","filter","flattenedGroups","hasGrouping","groupsSortedIndexes","noGroupsSortedIndexes","constructor","Set","makeAutoObservable","computed","equals","comparer","finalIndexes","merge","propertiesObj","Object","assign","HeaderLabel","observer","m","label","collectedProps","dragRef","useDrag","item","type","ref","className","css","onClick","onDoubleClick","e","ctrlKey","aria-sort","undefined","HeaderInput","onChange","target","getCount","total","nested","getSum","j","SummaryCell","GroupsPanel","dropRef","useDrop","accept","drop","groupKey","GroupCell","isCollapsed","groupPath","groupLabel","Fragment","style","marginLeft","col","totals","path","reduce","res","key","ComplexTable","props","useState","RowsAggregator","normalizedColumns","useNormalizedTableColumns","useEffect","initialGroupingKeys","slice","initialGrouingIndex","initialGroupingIndex","DndProvider","backend","HTML5Backend","cx","Table","renderRow","renderCell","CellsList","Cell","realRowIndex","colSpan","renderHeaderCells","renderFooter","normalizedVisibleColumns","some","rows","fixedRange","firstName","faker","lastName","country","getPureRandomLineHeight","estimatedRowHeight","render","cellData","rowData","color","textAlign","lineHeight","background"],"mappings":"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","file":"48417ceb3d178f8d2a09.js","sourcesContent":["const multiGroupBy = ( indexesArray, groupDataKeysList, getRowData, priorityGroupValuesArray ) => {\n\n    const lastGroupIndex = groupDataKeysList.length - 1;\n\n    if( process.env.NODE_ENV !== \"production\" ){\n        if( lastGroupIndex < 0 ){\n            throw new Error( \"lastGroupIndex < 0\" );\n        }\n    }\n\n    const lastGroupDataKey = groupDataKeysList[ lastGroupIndex ];\n    const groupsMap = new Map();\n   \n\n    for( let rowIndex of indexesArray ){\n        /*\n            It is better to start from indexes iteration, not from groups, to minimize getRowData calls\n        */\n        const row = getRowData( rowIndex );\n\n        let innerObject = groupsMap,\n            tmpInnerObject,\n            cellValue;\n\n        /*\n            We could put everything in one loop, but last iteration is different.\n        */\n        for( let i = 0; i < lastGroupIndex; i++ ){\n            cellValue = row[ groupDataKeysList[ i ] ];\n            tmpInnerObject = innerObject.get( cellValue );\n            if( !tmpInnerObject ){\n                tmpInnerObject = new Map();\n                for( let priorityValue of priorityGroupValuesArray[ i ] ){\n                    if( !innerObject.has( priorityValue ) ){\n                        innerObject.set( priorityValue, null );\n                    }\n                }\n                innerObject.set( cellValue, tmpInnerObject );\n            }\n            innerObject = tmpInnerObject;\n        }\n\n        cellValue = row[ lastGroupDataKey ];\n        tmpInnerObject = innerObject.get( cellValue );\n\n        if( tmpInnerObject ){\n            tmpInnerObject.push( rowIndex );\n        }\n        else {\n            for( let priorityValue of priorityGroupValuesArray[ lastGroupIndex ] ){\n                if( !innerObject.has( priorityValue  ) ){\n                    innerObject.set( priorityValue, null );\n                }\n            }\n            innerObject.set( cellValue, [ rowIndex ]);\n        }\n    }\n\n    return groupsMap;\n}\n\nexport default multiGroupBy;","const getSorter = ( getRowData, sortDataKey, sortDirection ) => ( a, b ) => {\n    const row1 = getRowData( a );\n    const row2 = getRowData( b );\n\n    if( row1 && row2 ){\n        const v1 = row1[ sortDataKey ];\n        const v2 = row2[ sortDataKey ];\n        return v1 > v2 ? sortDirection : v1 < v2 ? -sortDirection : 0;\n    }\n\n    return row1 ? sortDirection : row2 ? -sortDirection : 0;\n}\n\nexport default getSorter;","import getSorter from \"../getSorter\";\n\nconst sortGroups = ( groupsMap, getRowData, sortDataKey, sortDirection, depth, currentDepth = 0 ) => {\n\n    const groupValues = groupsMap.values();\n\n    if( currentDepth < depth - 1 ){\n        for( let group of groupValues ){\n            if( group ){\n                sortGroups( group, getRowData, sortDataKey, sortDirection, depth, currentDepth + 1 );\n            }\n        }\n    }\n    else{\n        const sortCallback = getSorter( getRowData, sortDataKey, sortDirection );\n\n        for( let group of groupValues ){\n            if( group ){\n                group.sort( sortCallback );\n            }\n        }\n    }\n}\n\nexport default sortGroups;","const flattenGroups = ( groupsMap, collapsedGroups, prefix = [], groupValues = [], rowIndexes = [] ) => {\n    let idx;\n    for( let [ groupValue, subGroup ] of groupsMap ){\n        if( subGroup ){\n            const concatenated = prefix.concat( groupValue );\n            idx = -groupValues.push( concatenated );\n            rowIndexes.push( idx );\n            if( !collapsedGroups.has( idx ) ){\n                if( Array.isArray( subGroup ) ){\n                    rowIndexes.push.apply( rowIndexes, subGroup );\n                }\n                else{\n                    flattenGroups( subGroup, collapsedGroups, concatenated, groupValues, rowIndexes );\n                }\n            }\n        }\n    }\n\n    return { groupValues, rowIndexes };\n}\n\nexport default flattenGroups;","import { makeAutoObservable, comparer, computed } from \"mobx\"; \nimport multiGroupBy from \"./utils/multiGroupBy\";\nimport sortGroups from \"./utils/sortGroups\";\nimport flattenGroups from \"./utils/flattenGroups\";\nimport getSorter from \"./utils/getSorter\";\n\nclass RowsAggregator {\n\n    /* Provided from renderer */\n    rowsQuantity = 0;\n    getRowData = null;\n    columns = [];\n    compact = true;\n\n    /* Calculated inside model */\n    filtersMap = new Map();\n    groupKeys = [];\n    sortDataKey = \"\";\n    sortDirection = -1;\n\n    collapsedGroups = new Set();\n\n\n    get priorityGroupValuesArray(){\n        return this.groupKeys.map( dataKey => this.columns.find( c => c.dataKey === dataKey ).priorityGroupValues || [] );\n    }\n\n    setFiltering( dataKey, value ){\n        if( value ){\n            this.filtersMap.set( dataKey, value.toLowerCase() );\n        }\n        else{\n            this.filtersMap.delete( dataKey );\n        }\n    }\n\n    toggleCompact(){\n        this.compact = !this.compact;\n    }\n\n    setSorting( dataKey ){\n        if( this.sortDataKey === dataKey ){\n            this.sortDirection *= -1;\n        }\n        this.sortDataKey = dataKey;\n    }\n\n    setGrouping( dataKeysArray ){\n        this.groupKeys = dataKeysArray;\n    }\n\n    addGrouping( dataKey ){\n        if( !this.groupKeys.includes( dataKey ) ){\n            this.groupKeys.push( dataKey );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    toggleCollapsedGroup( idx ){\n        if( this.collapsedGroups.has( idx ) ){\n            this.collapsedGroups.delete( idx );\n        }\n        else{\n            this.collapsedGroups.add( idx );\n        }\n    }\n\n    removeGrouping( dataKey ){\n        const idx = this.groupKeys.indexOf( dataKey );\n        if( idx !== -1 ){\n            this.groupKeys.splice( idx, 1 );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    get orderedIndexes(){\n        return Array.from({ length: this.rowsQuantity }, ( v, i ) => i );\n    }\n\n    get grouped(){\n        return multiGroupBy( this.filteredIndexes, this.groupKeys, this.getRowData, this.priorityGroupValuesArray );\n    }\n\n    get groupedSorted(){\n        if( this.sortDataKey ){\n            sortGroups( this.grouped, this.getRowData, this.sortDataKey, this.sortDirection, this.groupKeys.length );\n        }\n        return this.grouped;\n    }\n\n    get flattenedGroups(){\n        return flattenGroups( this.groupedSorted, this.collapsedGroups );\n    }\n\n    get filteredIndexes(){\n        const { filtersMap, orderedIndexes } = this;\n        if( this.filtersMap.size ){\n            const filteredIndexesArray = orderedIndexes.filter( idx => {\n                const row = this.getRowData( idx );\n                for( let [ dataKey, value ] of filtersMap ){\n                    if( !( \"\" + row[ dataKey ] ).toLowerCase().includes( value ) ){\n                        return false;\n                    }\n                }\n                return true;\n            });\n\n            return filteredIndexesArray;\n        }\n        return orderedIndexes;\n    }\n\n    \n    get noGroupsSortedIndexes(){\n        return this.sortDataKey ? this.filteredIndexes.sort( getSorter( this.getRowData, this.sortDataKey, this.sortDirection ) ) : this.filteredIndexes;\n    }\n\n    get groupsSortedIndexes(){\n        return this.flattenedGroups.rowIndexes;\n    }\n\n    get hasGrouping(){\n        return !!this.groupKeys.length;\n    }\n\n    get finalIndexes(){\n        return this.hasGrouping ? this.groupsSortedIndexes : this.noGroupsSortedIndexes;\n    }\n\n    constructor(){\n        makeAutoObservable( this, {\n            priorityGroupValuesArray: computed({ equals: comparer.structural }),\n            groupedSorted: computed({ equals: () => false }),\n            groupsSortedIndexes: computed({ equals: () => false }),\n            noGroupsSortedIndexes: computed({ equals: () => false }),\n            finalIndexes: computed({ equals: () => false }),\n            filteredIndexes: computed({ equals: () => false }),\n            orderedIndexes: computed({ equals: () => false })\n        });\n    }\n\n    merge( propertiesObj ){\n        Object.assign( this, propertiesObj );\n    }\n}\n\nexport default RowsAggregator;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_2B3KY_2EhDdLzl3od9PxI3\",\"sortableHeader\":\"_3xhCMieeqyydLLrsB_Rjwr\",\"input\":\"_7PdTV3zpJzO5l3JPCJbaz\",\"groupsPanel\":\"_24CQvBWd2KIxalcwIBcG6S\",\"groupLabel\":\"_1Pfh0g4BE_cuNHu46ByRkY\",\"columnSummaries\":\"QsUrLMXUKybinaPXO0z0B\"};","import { Fragment, useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport RowsAggregator from \"models/RowsAggregator\";\nimport Table from \"../Table\";\nimport useNormalizedTableColumns from \"hooks/useNormalizedTableColumns\";\nimport cx from \"utils/cx\";\nimport css from \"./style.module.scss\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\n\nconst HEADER_DND_TYPE = \"h\";\n\nconst HeaderLabel = /*#__PURE__*/ observer(({ m, dataKey, label }) => {\n\n    const [ collectedProps, dragRef ] = useDrag({ item: {\n        type: HEADER_DND_TYPE,\n        dataKey\n    }});\n\n    return (\n        <div\n            ref={dragRef}\n            className={css.sortableHeader}\n            onClick={() => m.setSorting( dataKey )}\n            onDoubleClick={ e => e.ctrlKey && m.toggleCompact()}\n            aria-sort={m.sortDataKey === dataKey?(m.sortDirection===1?\"ascending\":\"descending\"):undefined}\n        >\n            {label}\n        </div>\n    );\n});\n\nconst HeaderInput = /*#__PURE__*/ observer(({ m, dataKey }) => m.compact ? null : (\n    <input\n        className={css.input}\n        value={m.filtersMap.get( dataKey )||\"\"}\n        onChange={e => m.setFiltering( dataKey, e.target.value )}\n    />\n));\n\nconst getCount = rowIndexes => {\n\n    let total = 0;\n\n    if( Array.isArray( rowIndexes ) ){\n        total += rowIndexes.length;\n    }\n    else {\n        for( let nested of rowIndexes.values() ){\n            if( nested ){\n                total += getCount( nested );\n            }\n        }\n    }\n\n    return total;\n}\n\nconst getSum = ( rowIndexes, dataKey, getRowData ) => {\n\n    let total = 0;\n\n    if( Array.isArray( rowIndexes ) ){\n        let row;\n        for( let j of rowIndexes ){\n            row = getRowData( j );\n            total += row[ dataKey ];\n        }\n    }\n    else {\n        for( let nested of rowIndexes.values() ){\n            if( nested ){\n                total += getSum( nested, dataKey, getRowData );\n            }\n        }\n    }\n\n    return total;\n}\n\nconst SummaryCell = /*#__PURE__*/ observer(({ m, type, dataKey, rowIndexes }) => {\n\n    if( type === \"count\" ){\n        return getCount( rowIndexes );\n    }\n\n    if( type === \"sum\" ){\n        return getSum( rowIndexes, dataKey, m.getRowData )\n    }\n\n    return null;\n});\n\nconst GroupsPanel = /*#__PURE__*/ observer(({ m }) => {\n\n    const [ collectedProps, dropRef ] = useDrop({\n        accept: HEADER_DND_TYPE,\n        drop( item ){\n            m.addGrouping( item.dataKey );\n        }\n    });\n\n    return m.compact ? null : (\n        <div className={css.groupsPanel} ref={dropRef}>\n            {m.groupKeys.length ? m.groupKeys.map( groupKey => (\n                <div className={css.groupLabel} key={groupKey} onDoubleClick={() => m.removeGrouping( groupKey )}>\n                    {groupKey}\n                </div>\n            )) : \"Drag column headers here to group by column\" }\n        </div>\n    );\n});\n\nconst getInMap = ( map, path ) => path.reduce(( res, key ) => res.get( key ), map );\n\nconst GroupCell = /*#__PURE__*/ observer(({ m, columns, idx }) => {\n\n    const isCollapsed = m.collapsedGroups.has( idx );\n\n    if( m.hasGrouping ){\n\n        const groupPath = m.flattenedGroups.groupValues[~idx];\n\n        if( groupPath ){\n\n            const lastGroupIndex = groupPath.length - 1;\n            const groupKey = m.groupKeys[lastGroupIndex];\n            const groupLabel = columns.find( c => c.dataKey === groupKey ).label;\n\n            return (\n                <Fragment>\n                    <span\n                        onClick={() => m.toggleCollapsedGroup( idx )}\n                        style={{\n                            marginLeft: `${(lastGroupIndex)*2}em`\n                        }}\n                    >\n                        {isCollapsed ? \"+\" : \"-\"}\n                    </span>\n                    &nbsp;\n                    {groupLabel}:&nbsp;{groupPath[lastGroupIndex]}\n                    {columns.length ? (\n                        <span className={css.columnSummaries}>\n                            {columns.map( col => col.totals ? (\n                                <span key={col.dataKey}>\n                                    {col.label}:\n                                    &nbsp;\n                                    <SummaryCell\n                                        m={m}\n                                        type={col.totals}\n                                        dataKey={col.dataKey}\n                                        rowIndexes={getInMap(m.grouped,groupPath)}\n                                    />\n                                </span>\n                            ) : null)}\n                        </span>\n                    ) : null}\n                </Fragment>\n            );\n        }\n        \n    }\n\n    return null;\n});\n\nconst ComplexTable = ({ rowsQuantity, getRowData, className, columns, ...props }) => {\n\n    const [ m ] = useState(() => new RowsAggregator());\n\n    const { finalIndexes } = m;\n\n    const renderRow = ( rowIndex, columns, getRowData, renderCell, CellsList, Cell ) => {\n        const realRowIndex = finalIndexes[ rowIndex ];\n        return (\n            <tr key={realRowIndex}>\n                {realRowIndex < 0 ? (\n                    <td colSpan={columns.length}>\n                        <GroupCell m={m} idx={realRowIndex} columns={columns} />\n                    </td>\n                ) : (\n                    <CellsList\n                        rowIndex={realRowIndex}\n                        columns={columns}\n                        getRowData={getRowData}\n                        renderCell={renderCell}\n                        Cell={Cell}\n                    />\n                )}\n            </tr>\n        );\n    }\n\n    const renderHeaderCells = columns => columns.map(({ dataKey, label }) => (\n        <th key={dataKey}>\n            <HeaderLabel m={m} dataKey={dataKey} label={label} />\n            <HeaderInput m={m} dataKey={dataKey} />\n        </th>\n    ));\n\n    const normalizedColumns = useNormalizedTableColumns( columns );\n\n    useEffect(() => m.merge({ rowsQuantity, getRowData, columns: normalizedColumns }));\n\n    useEffect(() => {\n        const initialGroupingKeys = normalizedColumns\n            .slice()\n            .sort(( a, b ) => ( a.initialGrouingIndex || 0 ) - ( b.initialGrouingIndex || 0 ) )\n            .filter( col => col.initialGroupingIndex )\n            .map( col => col.dataKey );\n\n        m.setGrouping( initialGroupingKeys );\n    }, []);\n\n    const renderFooter = normalizedVisibleColumns => normalizedVisibleColumns.some( col => !!col.totals ) ? (\n        <tfoot>\n            <tr>\n                {normalizedVisibleColumns.map(({ dataKey, totals }) => (\n                    <td key={dataKey}>\n                        <SummaryCell m={m} dataKey={dataKey} type={totals} rowIndexes={m.filteredIndexes} />\n                    </td>\n                ))}\n            </tr>\n        </tfoot>\n    ) : null;\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className={cx(css.wrapper,className)}>\n                <GroupsPanel m={m} />\n                <Table\n                    columns={normalizedColumns}\n                    rowsQuantity={finalIndexes.length}\n                    getRowData={getRowData}\n                    renderRow={renderRow}\n                    renderHeaderCells={renderHeaderCells}\n                    renderFooter={renderFooter}\n                    {...props}\n                />\n            </div>\n        </DndProvider> \n    );\n}\n\nexport default /*#__PURE__*/ observer( ComplexTable );","import { ComplexTable as Table } from  \"af-virtual-scroll\";\nimport faker from \"faker\";\n\nconst rows = Array.from({ length: 10000 }, (v, i) => ({\n    i,\n    fixedRange: i % 9,\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    country: faker.address.country()\n}));\n\n/* Math.random is not the best option, because same rowIndex should produce same height */\nconst getPureRandomLineHeight = rowIndex => 20 + ( rowIndex % 53 ) + ( rowIndex % 87 );\n\nconst ComplexTable = () => (\n    <Table\n        rowsQuantity={rows.length}\n        getRowData={i => rows[ i ]}\n        estimatedRowHeight={30}\n        columns={[\n            {\n                dataKey: \"i\",\n                totals: \"sum\",\n                render: ( cellData, rowData, rowIndex ) => (\n                    <div style={{\n                        color: \"#000\",\n                        textAlign: \"center\",\n                        lineHeight: `${getPureRandomLineHeight(rowIndex)}px`,\n                        background: `hsl(${rowIndex*11%360},60%,60%)`\n                    }}>\n                        {cellData}\n                    </div>\n                )\n            },\n            {\n                dataKey: \"fixedRange\",\n                initialGroupingIndex: 1,\n                priorityGroupValues: [ 4, 7, 71, 5 ]\n            },\n            {\n                dataKey: \"firstName\",\n                initialGroupingIndex: 2,\n                priorityGroupValues: [ \"Dennis\" ],\n                totals: \"count\"\n            },\n            \"lastName\",\n            \"country\"\n        ]}\n    />\n);\n\nexport default ComplexTable;"],"sourceRoot":""}