{"version":3,"sources":["webpack://af-virtual-scroll/./src/components/List/Rows/index.js","webpack://af-virtual-scroll/./src/components/List/index.js","webpack://af-virtual-scroll/./src/examples/list/variableRowHeights/index.js"],"names":["E","START_INDEX","END_INDEX","Rows","renderRow","useSubscription","API","startIndex","endIndex","result","i","push","memo","List","fixed","children","estimatedRowHeight","rowsQuantity","overscanRowsCount","dataRef","props","rowsContainerNode","rowsContainerRef","useState","Store","useModel","FixedHeightsStore","VariableHeightsStore","Context","value","ScrollContainer","Scroller","as","ref","propTypes","defaultProps","commonDefaultProps","StyledList","styled","StyledRow","DEFAULT_ROW_COUNT","dynamicListRowHeights","times","r","style","lineHeight","background"],"mappings":";0RAIA,MAAMA,EAAI,CAAEC,KAAaC,MAEnBC,EAAO,EAAGC,gBAAgBC,QAAiBC,IAE7C,MAAM,WAAEC,EAAF,SAAcC,GAAaF,EAC3BG,EAAS,GAEf,IAAK,IAAIC,EAAIH,EAAYG,EAAIF,EAAUE,IACnCD,EAAOE,KAAMP,EAAWM,IAG5B,OAAOD,IACRT,GAEH,GAAeY,UAAMT,GCFfU,EAAQ,IAQR,IARQ,MACVC,EADU,SAEVC,EAFU,mBAGVC,EAHU,aAIVC,EAJU,kBAKVC,EALU,QAMVC,GAEE,EADCC,GACD,iGAEF,MAAQC,EAAmBC,IAAqBC,gBAE1CC,GAAQC,OACVX,EAAQY,IAAoBC,IAC5BR,EACAH,EACAE,EACAD,EACAI,GAGJ,OACI,SAACO,EAAA,WAAD,CAAkBC,MAAOL,EAAzB,UACI,UAACM,EAAA,EAAD,iBAAqBV,EAArB,YACI,SAACW,EAAA,EAAD,CAAUC,GAAG,SACb,gBAAKC,IAAKX,EAAV,UACI,SAAC,EAAD,CAAMlB,UAAWW,aAOrCF,EAAKqB,UAAL,GAUArB,EAAKsB,aAAeC,IAEpB,SAAexB,UAAMC,I,qbCvDrB,MAAMwB,GAAaC,QAAOzB,IAAPyB,CAAH,KAMVC,EAAYD,SAAH,KAMTE,EAAoB,IAwB1B,EAtByB,KAErB,MAAQC,IAA0BlB,eAAS,IAAMmB,IAAOF,GAAmB,IAAMG,IAAG,GAAI,SAExF,OACI,SAACN,EAAD,CACIrB,mBAAoB,GACpBE,kBAAmB,EACnBD,aAAcuB,EAHlB,SAKK9B,IACG,UAAC6B,EAAD,CAAmBK,MAAO,CACtBC,WAAeJ,EAAsB/B,GAA3B,KACVoC,WAAY,OAAS,GAAFpC,EAAK,IAAd,aAFd,iBAISA,EAJT,KAImB+B,EAAsB/B,GAJzC,OAAgBA","file":"09dfb90bd638dd150746.js","sourcesContent":["import { memo } from \"react\";\r\nimport { START_INDEX, END_INDEX } from \"constants/events\";\r\nimport useSubscription from \"hooks/useSubscription\";\r\n\r\nconst E = [ START_INDEX, END_INDEX ];\r\n\r\nconst Rows = ({ renderRow }) => useSubscription( API => {\r\n\r\n    const { startIndex, endIndex } = API;\r\n    const result = [];\r\n\r\n    for( let i = startIndex; i < endIndex; i++ ){\r\n        result.push( renderRow( i ) );\r\n    }\r\n\r\n    return result;\r\n}, E );\r\n\r\nexport default memo( Rows );","import { memo, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Context from \"Context\";\r\nimport useModel from \"hooks/useModel\";\r\n\r\nimport VariableHeightsStore from \"models/VariableSizeList\";\r\nimport FixedHeightsStore from \"models/FixedSizeList\";\r\n\r\nimport ScrollContainer from \"../common/ScrollContainer\";\r\nimport Scroller from \"../common/Scroller\";\r\nimport commonPropTypes from \"../common/propTypes\";\r\nimport commonDefaultProps from \"../common/defaultProps\";\r\n\r\nimport Rows from \"./Rows\";\r\n\r\nconst List = ({\r\n    fixed,\r\n    children,\r\n    estimatedRowHeight,\r\n    rowsQuantity,\r\n    overscanRowsCount,\r\n    dataRef,\r\n    ...props\r\n}) => {\r\n\r\n    const [ rowsContainerNode, rowsContainerRef ] = useState();\r\n\r\n    const Store = useModel(\r\n        fixed ? FixedHeightsStore : VariableHeightsStore,\r\n        dataRef,\r\n        estimatedRowHeight,\r\n        overscanRowsCount,\r\n        rowsQuantity,\r\n        rowsContainerNode\r\n    );\r\n\r\n    return (\r\n        <Context.Provider value={Store}>\r\n            <ScrollContainer {...props}>\r\n                <Scroller as=\"div\" />\r\n                <div ref={rowsContainerRef}>\r\n                    <Rows renderRow={children} /> \r\n                </div>\r\n            </ScrollContainer>\r\n        </Context.Provider>\r\n    );\r\n};\r\n\r\nList.propTypes = {\r\n    ...commonPropTypes,\r\n\r\n    /**\r\n     * @param {number} rowIndex\r\n     * @returns {any} one row element child. Fragments are not supported.\r\n     */\r\n    children: PropTypes.func.isRequired\r\n}\r\n\r\nList.defaultProps = commonDefaultProps;\r\n\r\nexport default memo( List );","import { useState } from \"react\";\nimport { List } from \"af-virtual-scroll\";\nimport styled from \"styled-components\";\nimport times from \"lodash/times\";\nimport r from \"lodash/random\";\n\nconst StyledList = styled(List)`\n    flex: 1 1 20em;\n    min-width: 12em;\n    max-width: 36em;\n`;\n\nconst StyledRow = styled.div`\n    border-top: 1px solid #666;\n    color: #000;\n    text-align: center;\n`;\n\nconst DEFAULT_ROW_COUNT = 200000;\n\nconst VariableSizeList = () => {\n\n    const [ dynamicListRowHeights ] = useState(() => times( DEFAULT_ROW_COUNT, () => r( 50, 100 ) ));\n\n    return (\n        <StyledList\n            estimatedRowHeight={75}\n            overscanRowsCount={5}\n            rowsQuantity={DEFAULT_ROW_COUNT}\n        >\n            {i => (\n                <StyledRow key={i} style={{\n                    lineHeight: `${dynamicListRowHeights[i]}px`,\n                    background: `hsl(${i*11%360},60%,60%)`\n                }}>\n                    row {i}:&nbsp;{dynamicListRowHeights[i]}px\n                </StyledRow>\n            )}\n        </StyledList>\n    );\n}\n\nexport default VariableSizeList;"],"sourceRoot":""}