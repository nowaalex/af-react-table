{"version":3,"sources":["webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/multiGroupBy/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/getSorter/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/sortGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/utils/flattenGroups/index.js","webpack://af-virtual-scroll/./src/models/RowsAggregator/index.js","webpack://af-virtual-scroll/./src/components/ComplexTable/style.module.scss?b8c6","webpack://af-virtual-scroll/./src/components/ComplexTable/index.js","webpack://af-virtual-scroll/./src/examples/complexTable(beta)/basic/index.js"],"names":["indexesArray","groupDataKeysList","getRowData","lastGroupIndex","length","lastGroupDataKey","groupsMap","Map","rowIndex","row","tmpInnerObject","cellValue","innerObject","i","get","set","push","sortDataKey","sortDirection","a","b","row1","row2","v1","v2","sortGroups","depth","currentDepth","groupValues","values","group","sortCallback","getSorter","sort","flattenGroups","collapsedGroups","prefix","rowIndexes","idx","groupValue","subGroup","has","Array","isArray","apply","setFiltering","dataKey","value","this","filtersMap","toLowerCase","delete","setSorting","addGrouping","groupKeys","includes","clear","toggleCollapsedGroup","add","removeGrouping","indexOf","splice","from","rowsQuantity","v","multiGroupBy","filteredIndexes","grouped","groupedSorted","orderedIndexes","size","filter","flattenedGroups","hasGrouping","groupsSortedIndexes","noGroupsSortedIndexes","constructor","Set","makeAutoObservable","computed","equals","finalIndexes","merge","propertiesObj","Object","assign","HeaderLabel","observer","m","label","collectedProps","dragRef","useDrag","item","type","ref","className","css","onClick","aria-sort","undefined","HeaderInput","onChange","e","target","GroupsPanel","dropRef","useDrop","accept","drop","map","groupKey","onDoubleClick","GroupCell","isCollapsed","Fragment","props","useState","RowsAggregator","useEffect","DndProvider","backend","HTML5Backend","cx","Table","renderRow","columns","renderCell","CellsList","Cell","realRowIndex","colSpan","renderTheadContents","rows","firstName","faker","lastName","country","getPureRandomLineHeight","estimatedRowHeight","render","cellData","rowData","style","color","textAlign","lineHeight","background"],"mappings":"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","file":"c34b1161e43b1514f4ab.js","sourcesContent":["const multiGroupBy = ( indexesArray, groupDataKeysList, getRowData ) => {\n\n    const lastGroupIndex = groupDataKeysList.length - 1;\n\n    if( process.env.NODE_ENV !== \"production\" ){\n        if( lastGroupIndex < 0 ){\n            throw new Error( \"lastGroupIndex < 0\" );\n        }\n    }\n\n    const lastGroupDataKey = groupDataKeysList[ lastGroupIndex ];\n    const groupsMap = new Map();\n   \n\n    for( let rowIndex of indexesArray ){\n        /*\n            It is better to start from indexes iteration, not from groups, to minimize getRowData calls\n        */\n        const row = getRowData( rowIndex );\n\n        let innerObject = groupsMap,\n            tmpInnerObject,\n            cellValue;\n\n        /*\n            We could put everything in one loop, but last iteration is different.\n        */\n        for( let i = 0; i < lastGroupIndex; i++ ){\n            cellValue = row[ groupDataKeysList[ i ] ];\n            tmpInnerObject = innerObject.get( cellValue );\n            if( !tmpInnerObject ){\n                tmpInnerObject = new Map();\n                innerObject.set( cellValue, tmpInnerObject );\n            }\n            innerObject = tmpInnerObject;\n        }\n\n        cellValue = row[ lastGroupDataKey ];\n        tmpInnerObject = innerObject.get( cellValue );\n\n        if( tmpInnerObject ){\n            tmpInnerObject.push( rowIndex );\n        }\n        else {\n            innerObject.set( cellValue, [ rowIndex ]);\n        }\n    }\n\n    return groupsMap;\n}\n\nexport default multiGroupBy;","const getSorter = ( getRowData, sortDataKey, sortDirection ) => ( a, b ) => {\n    const row1 = getRowData( a );\n    const row2 = getRowData( b );\n\n    if( row1 && row2 ){\n        const v1 = row1[ sortDataKey ];\n        const v2 = row2[ sortDataKey ];\n        return v1 > v2 ? sortDirection : v1 < v2 ? -sortDirection : 0;\n    }\n\n    return row1 ? sortDirection : row2 ? -sortDirection : 0;\n}\n\nexport default getSorter;","import getSorter from \"../getSorter\";\n\nconst sortGroups = ( groupsMap, getRowData, sortDataKey, sortDirection, depth, currentDepth = 0 ) => {\n\n    const groupValues = groupsMap.values();\n\n    if( currentDepth < depth - 1 ){\n        for( let group of groupValues ){\n            sortGroups( group, getRowData, sortDataKey, sortDirection, depth, currentDepth + 1 );\n        }\n    }\n    else{\n        const sortCallback = getSorter( getRowData, sortDataKey, sortDirection );\n\n        for( let group of groupValues ){\n            group.sort( sortCallback );\n        }\n    }\n}\n\nexport default sortGroups;","const flattenGroups = ( groupsMap, collapsedGroups, prefix = \"\", groupValues = [], rowIndexes = [] ) => {\n    let idx;\n    for( let [ groupValue, subGroup ] of groupsMap ){\n        idx = -groupValues.push( prefix + groupValue );\n        rowIndexes.push( idx );\n        if( !collapsedGroups.has( idx ) ){\n            if( Array.isArray( subGroup ) ){\n                rowIndexes.push.apply( rowIndexes, subGroup );\n            }\n            else{\n                flattenGroups( subGroup, collapsedGroups, prefix + groupValue + \".\", groupValues, rowIndexes );\n            }\n        }\n    }\n\n    return { groupValues, rowIndexes };\n}\n\nexport default flattenGroups;","import { makeAutoObservable, computed } from \"mobx\"; \nimport multiGroupBy from \"./utils/multiGroupBy\";\nimport sortGroups from \"./utils/sortGroups\";\nimport flattenGroups from \"./utils/flattenGroups\";\nimport getSorter from \"./utils/getSorter\";\n\nclass RowsAggregator {\n\n    /* Provided from renderer */\n    rowsQuantity = 0;\n    getRowData = null;\n\n    /* Calculated inside model */\n    filtersMap = new Map();\n    groupKeys = [];\n    sortDataKey = \"\";\n    sortDirection = -1;\n\n    collapsedGroups = new Set();\n\n    setFiltering( dataKey, value ){\n        if( value ){\n            this.filtersMap.set( dataKey, value.toLowerCase() );\n        }\n        else{\n            this.filtersMap.delete( dataKey );\n        }\n    }\n\n    setSorting( dataKey ){\n        if( this.sortDataKey === dataKey ){\n            this.sortDirection *= -1;\n        }\n        this.sortDataKey = dataKey;\n    }\n\n    addGrouping( dataKey ){\n        if( !this.groupKeys.includes( dataKey ) ){\n            this.groupKeys.push( dataKey );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    toggleCollapsedGroup( idx ){\n        if( this.collapsedGroups.has( idx ) ){\n            this.collapsedGroups.delete( idx );\n        }\n        else{\n            this.collapsedGroups.add( idx );\n        }\n    }\n\n    removeGrouping( dataKey ){\n        const idx = this.groupKeys.indexOf( dataKey );\n        if( idx !== -1 ){\n            this.groupKeys.splice( idx, 1 );\n            this.collapsedGroups.clear();\n        }\n    }\n\n    get orderedIndexes(){\n        return Array.from({ length: this.rowsQuantity }, ( v, i ) => i );\n    }\n\n    get grouped(){\n        return multiGroupBy( this.filteredIndexes, this.groupKeys, this.getRowData );\n    }\n\n    get groupedSorted(){\n        if( this.sortDataKey ){\n            sortGroups( this.grouped, this.getRowData, this.sortDataKey, this.sortDirection, this.groupKeys.length );\n        }\n        return this.grouped;\n    }\n\n    get flattenedGroups(){\n        return flattenGroups( this.groupedSorted, this.collapsedGroups );\n    }\n\n    get filteredIndexes(){\n        //return this.orderedIndexes;\n        const { filtersMap, orderedIndexes } = this;\n        if( this.filtersMap.size ){\n            const filteredIndexesArray = orderedIndexes.filter( idx => {\n                const row = this.getRowData( idx );\n                for( let [ dataKey, value ] of filtersMap ){\n                    if( !( \"\" + row[ dataKey ] ).toLowerCase().includes( value ) ){\n                        return false;\n                    }\n                }\n                return true;\n            });\n\n            return filteredIndexesArray;\n        }\n        return orderedIndexes;\n    }\n\n    \n    get noGroupsSortedIndexes(){\n        return this.sortDataKey ? this.filteredIndexes.sort( getSorter( this.getRowData, this.sortDataKey, this.sortDirection ) ) : this.filteredIndexes;\n    }\n\n    get groupsSortedIndexes(){\n        return this.flattenedGroups.rowIndexes;\n    }\n\n    get hasGrouping(){\n        return !!this.groupKeys.length;\n    }\n\n    get finalIndexes(){\n        return this.hasGrouping ? this.groupsSortedIndexes : this.noGroupsSortedIndexes;\n    }\n\n    constructor(){\n        makeAutoObservable( this, {\n            groupedSorted: computed({ equals: () => false }),\n            groupsSortedIndexes: computed({ equals: () => false }),\n            noGroupsSortedIndexes: computed({ equals: () => false }),\n            finalIndexes: computed({ equals: () => false }),\n            filteredIndexes: computed({ equals: () => false }),\n            orderedIndexes: computed({ equals: () => false })\n        });\n    }\n\n    merge( propertiesObj ){\n        Object.assign( this, propertiesObj );\n    }\n}\n\nexport default RowsAggregator;","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"_2B3KY_2EhDdLzl3od9PxI3\",\"sortableHeader\":\"_3xhCMieeqyydLLrsB_Rjwr\",\"input\":\"_7PdTV3zpJzO5l3JPCJbaz\",\"groupsPanel\":\"_24CQvBWd2KIxalcwIBcG6S\",\"groupLabel\":\"_1Pfh0g4BE_cuNHu46ByRkY\"};","import { Fragment, useState, useEffect } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport RowsAggregator from \"models/RowsAggregator\";\nimport Table from \"../Table\";\nimport cx from \"utils/cx\";\nimport css from \"./style.module.scss\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\n\nconst HEADER_DND_TYPE = \"h\";\n\nconst HeaderLabel = observer(({ m, dataKey, label }) => {\n\n    const [ collectedProps, dragRef ] = useDrag({ item: {\n        type: HEADER_DND_TYPE,\n        dataKey\n    }});\n\n    return (\n        <div\n            ref={dragRef}\n            className={css.sortableHeader}\n            onClick={() => m.setSorting( dataKey )}\n            aria-sort={m.sortDataKey === dataKey?(m.sortDirection===1?\"ascending\":\"descending\"):undefined}\n        >\n            {label}\n        </div>\n    );\n});\n\nconst HeaderInput = observer(({ m, dataKey }) => (\n    <input\n        className={css.input}\n        value={m.filtersMap.get( dataKey )||\"\"}\n        onChange={e => m.setFiltering( dataKey, e.target.value )}\n    />\n));\n\nconst GroupsPanel = observer(({ m }) => {\n\n    const [ collectedProps, dropRef ] = useDrop({\n        accept: HEADER_DND_TYPE,\n        drop( item ){\n            m.addGrouping( item.dataKey );\n        }\n    });\n\n    return (\n        <div className={css.groupsPanel} ref={dropRef}>\n            {m.groupKeys.length ? m.groupKeys.map( groupKey => (\n                <div className={css.groupLabel} key={groupKey} onDoubleClick={() => m.removeGrouping( groupKey )}>\n                    {groupKey}\n                </div>\n            )) : \"Drag column headers here to group by column\" }\n        </div>\n    );\n});\n\nconst GroupCell = observer(({ m, idx }) => {\n\n    const isCollapsed = m.collapsedGroups.has( idx );\n\n    return m.hasGrouping ? (\n        <Fragment>\n            <span onClick={() => m.toggleCollapsedGroup( idx )}>{isCollapsed ? \"+\" : \"-\"}</span>\n            &nbsp;{m.flattenedGroups.groupValues[~idx]}\n        </Fragment>\n    ) : null;\n});\n\nconst ComplexTable = ({ rowsQuantity, getRowData, className, ...props }) => {\n\n    const [ m ] = useState(() => new RowsAggregator());\n\n    const { finalIndexes } = m;\n\n    const renderRow = ( rowIndex, columns, getRowData, renderCell, CellsList, Cell ) => {\n        const realRowIndex = finalIndexes[ rowIndex ];\n        return (\n            <tr key={realRowIndex}>\n                {realRowIndex < 0 ? (\n                    <td colSpan={columns.length}>\n                        <GroupCell m={m} idx={realRowIndex} />\n                    </td>\n                ) : (\n                    <CellsList\n                        rowIndex={realRowIndex}\n                        columns={columns}\n                        getRowData={getRowData}\n                        renderCell={renderCell}\n                        Cell={Cell}\n                    />\n                )}\n            </tr>\n        );\n    }\n\n    const renderTheadContents = columns => (\n        <tr>\n            {columns.map(({ dataKey, label }) => (\n                <th key={dataKey}>\n                    <HeaderLabel m={m} dataKey={dataKey} label={label} />\n                    <HeaderInput m={m} dataKey={dataKey} />\n                </th>\n            ))}\n        </tr>        \n    );\n\n    useEffect(() => m.merge({ rowsQuantity, getRowData }));\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className={cx(css.wrapper,className)}>\n                <GroupsPanel m={m} />\n                <Table\n                    rowsQuantity={finalIndexes.length}\n                    getRowData={getRowData}\n                    renderRow={renderRow}\n                    renderTheadContents={renderTheadContents}\n                    {...props}\n                />\n            </div>\n        </DndProvider> \n    );\n}\n\nexport default observer( ComplexTable );","import { ComplexTable as Table } from  \"af-virtual-scroll\";\nimport faker from \"faker\";\n\nconst rows = Array.from({ length: 10000 }, (v, i) => ({\n    i,\n    firstName: faker.name.firstName(),\n    lastName: faker.name.lastName(),\n    country: faker.address.country()\n}));\n\n/* Math.random is not the best option, because same rowIndex should produce same height */\nconst getPureRandomLineHeight = rowIndex => 20 + ( rowIndex % 53 ) + ( rowIndex % 87 );\n\nconst ComplexTable = () => (\n    <Table\n        rowsQuantity={rows.length}\n        getRowData={i => rows[ i ]}\n        estimatedRowHeight={30}\n        columns={[\n            {\n                dataKey: \"i\",\n                render: ( cellData, rowData, rowIndex ) => (\n                    <div style={{\n                        color: \"#000\",\n                        textAlign: \"center\",\n                        lineHeight: `${getPureRandomLineHeight(rowIndex)}px`,\n                        background: `hsl(${rowIndex*11%360},60%,60%)`\n                    }}>\n                        {cellData}\n                    </div>\n                )\n            },\n            \"firstName\",\n            \"lastName\",\n            \"country\"\n        ]}\n    />\n);\n\nexport default ComplexTable;"],"sourceRoot":""}